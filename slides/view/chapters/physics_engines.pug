include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/physics_engines/';

+mchapter('Physics Engine', imgAssets+'chapter_physics.svg')
+frameInbox('Physics engine')
    .important-orange
        ul
            li system that <span class="highlight">approximates</span> physical phenomena in real-time
            li computes dynamics of objects in virtual scene
            li you have to understand your game before you decide how to add a physical simulation to it
            li.mt-40.upside can improve immersion
            li.upside can support new gameplay events
            li.downside can broke the game story
            li.downside can take up significant computing resources
        .bottom-0.right-0
            img.height-600(src=imgAssets+'physics_01.png')
+frameInbox('Physics Engines')
    div
        .list-title.mt-10.fragment
            p N-Collide
            ul.leading-base
                li.fragment 2D/3D collision detection library written in Rust
        .list-title.mt-10.fragment
            p Box2D
            ul.leading-base
                li.fragment open-source C++ 2D physics engine
                li.fragment supports CCD (continuous collision detection)
        .list-title.mt-10.fragment
            p Bullet
            ul.leading-base
                li.fragment open-source 3D physics engine
                li.fragment used in game and film industry
                li.fragment supports CCD
        .list-title.mt-10.fragment
            p PhysX
            ul.leading-base
                li.fragment NVidia GPU engine
                li.fragment PhysX destruction, PhysX clothing, PhysX particles
        .list-title.mt-10.fragment
            p p2.js
            ul.leading-base
                li.fragment module JavaScript engine, supports CCD
        .list-title.mt-10.fragment
            p Havok
            ul.leading-base
                li.fragment gold commercial standard
        .bottom-0.right-0
            img.height-500(src=imgAssets+'physics_03.png')
+frameInbox('Physics engine flow')
    .important-green
    .center
        img.height-550(src=imgAssets+'physics_flow.svg')
+frameInbox('Physics and animation')
    .important-green
        ul
            li.highlight.fragment(data-fragment-index='1') physics 
                include ../../assets/physics_engines/equations_generated/animation.svg
                |&nbsp;animation!
            li.fragment(data-fragment-index='2') animations must cooperate with physics engine to run seamlessly
            li.fragment(data-fragment-index='3') cut-scenes and state-transition animations are detached from physics
            li.fragment(data-fragment-index='4') <span class="highlight-2">physics-based interactions</span> - animations generated by physics engine
                ul
                    li.fragment(data-fragment-index='5') better results, but more difficult to implement 
        .space-xl
        .flex-cols-3.ml-100.fragment(data-fragment-index='1')
            div.text-center
                img.height-280(src=imgAssets+'animation.gif')
            div.text-center
                img.height-280(src=imgAssets+'animation02.gif')
            div
                img.height-280(src=imgAssets+'animation03.gif')
+frameInbox('Physics engine features')
    div
        ul
            li.fragment collision detection
            li.fragment contact callbacks
            li.fragment joints
            li.fragment concave and convex hulls
            li.fragment compound bodies
            li.fragment sleeping objects
            li.fragment raycasting, shapecasting
            li.fragment deformable structures
            li.fragment destructible structures
            li.fragment trigger volumes
            li.fragment complex machines
            li.fragment drivable vehicles
            li.fragment rag doll characters
            li.fragment water surface, hair, cloth
            li.fragment particles
    .bottom-20.right-20
        img.height-500(src=imgAssets+'physics_04.png')
+frameInbox('Physics in games')
    div
        .list-title.fragment(data-fragment-index='1')
            p Pinballs (1980+)
            ul.spacing-md
                li non-trivial OBB collision detection
        .list-title.mt-10.fragment(data-fragment-index='2')
            p The Incredible Machine (1993)
            ul.spacing-md
                li advanced physical interactions
        .list-title.mt-10.fragment(data-fragment-index='3')
            p Half-Life 2 (2004)
            ul.spacing-md
                li destructible environment, liquid physics
        .list-title.mt-10.fragment(data-fragment-index='4')
            p Angry Birds (2009)
            ul.spacing-md
                li physics as the core mechanic
        .list-title.mt-10.fragment(data-fragment-index='5')
            p INSIDE (2016)
            ul.spacing-md
                li soft-bodies driven by a network of impulses
        .list-title.mt-10.fragment(data-fragment-index='6')
            p Half-Life Alyx (2020)
            ul.spacing-md
                li physics-based interactions
        .list-title.mt-10.fragment(data-fragment-index='7')
            p Noita (2020)
            ul.spacing-md
                li pixel-level physics simulation
        .top-20.right-20.fragment(data-fragment-index='1')
            img.height-300(src=imgAssets+'pinball.gif')
        .top-170.right-300.fragment(data-fragment-index='2')
            img.height-300(src=imgAssets+'incredible_machine.png')
        .top-280.right-20.fragment(data-fragment-index='3')
            img.height-400(src=imgAssets+'half-life2.jpg')
        .top-420.right-370.fragment(data-fragment-index='5')
            img.height-300(src=imgAssets+'inside.gif')
        .top-500.right-20.fragment(data-fragment-index='6')
            img.height-250(src=imgAssets+'half-life-alyx.jpg')
        .bottom-0.right-300.fragment(data-fragment-index='7')
            img.height-280(src=imgAssets+'noita.jpg')
        
+frameInbox('Object types')
    .important-orange
        .list-title.mt-10.fragment
            p Body
            ul
                li.fragment fundamental object in the physics scene
        .list-title.mt-10.fragment
            p Rigid Body
            ul
                li.fragment idealized, infinitely hard, non-deformable solid object
                li.fragment <span class="highlight-2">physics-driven bodies</span> - driven entirely by the simulation
                li.fragment <span class="highlight-2">game-driven bodies</span> - moved in a non-physical way (animations)
                li.fragment <span class="highlight-2">fixed bodies</span> - collision-only bodies (e.g. triggers)
        .list-title.mt-10.fragment
            p Soft body
            ul
                li.fragment deformable
        .list-title.mt-10.fragment
            p Shape
            ul
                li.fragment region of space described by a boundary, with a definite inside and outside (curved line, polygon, curved surface, polyhedron)
        .list-title.mt-10.fragment
            p Fixture
            ul
                li.fragment used to describe size, shape and material properties
        .right-50.top-250
            img.height-350(src=imgAssets+'cube.png')
+frameInbox('Object Types')
    .important-orange
        .list-title.fragment
            p Constraint
            ul
                li.fragment connects bodies together in order to simulate interaction (ropes, wheels, vehicles, chains)
        .list-title.fragment
            p Sensor/Phantom
            ul
                li.fragment entity that provides a feedback when certain objects overlap
                li.fragment participates on collision detection but doesn't affect the scene
        .list-title.fragment
            p Rag doll
            ul
                li.fragment displays human-like figures with a realistic motion
        .list-title.fragment
            p Destructible object
            ul
                li.fragment breakable object, can be implemented by using rigid body dynamics, dividing the model into a number of breakable pieces
+frameInbox('Constraints')
    .important-green
        ul
            li.fragment <span class="highlight">Revolute</span> - a hinge or pin, where the bodies rotate
                ul
                    li.fragment wheels, chains, rotating doors, catapults, levers
            li.fragment <span class="highlight">Distance</span> - a point on each body will be kept at a fixed distance apart
            li.fragment <span class="highlight">Rope</span> - restricts the maximum distance between two points
            li.fragment <span class="highlight">Prismatic</span> - body's motion is restricted to a single degree of freedom
                ul
                    li.fragment elevators, sliding doors, pistons
            li.fragment <span class="highlight">Weld</span> - holds the bodies at the same orientation
            li.fragment <span class="highlight">Cone-Twist</span> - adds a cone and twist axis limits (6 degrees of freedom)
            li.fragment <span class="highlight">Gear</span> - controls two other joints so that the movement of one affects the other
            li.fragment <span class="highlight">Motor</span> - joint with torque or angular impulses
        .text-center
            img.height-230(src=imgAssets+'car.svg')
+frameInbox('Constraints')
    .important-orange
    .flex.flex-row.justify-evenly.center
        figure.fragment
            img.height-500(src=imgAssets+'constraint_rope.svg')
            p rope
        figure.fragment
            img.height-500(src=imgAssets+'constraint_revolute.svg')
            p revolute
        figure.fragment
            img.height-500(src=imgAssets+'constraint_prismatic.svg')
            p prismatic
        figure.fragment
            img.height-500(src=imgAssets+'constraint_conetwist.svg')
            p cone-twist
+frameInbox('Constraints')
    div
        .top-170.left-350
            img.height-680(src=imgAssets+'joints.jpg')
        .top-130.left-10
            img.height-580(src=imgAssets+'constraints.svg')
+frameInbox('Fracturing')
    div
        ul
            li.fragment breaking an object into smaller fragments
            li.fragment in many cases destruction is not dynamic (can be made using animations)
            li.fragment techniques: manual fracturing, boolean operations, voxels, Voronoi Shattering
        .bottom-0.right-0.width-100p
            img.width-100p.radius-3(src=imgAssets+'fracturing.png')
+frameInbox('Soft bodies and liquids')
    .important-green
        ul
            li.fragment usually implemented as a combination of particle systems and visual effects
            li.fragment <span class="highlight">common model:</span>
                ol
                    li.fragment apply collision detection upon particles
                    li.fragment apply pressure and repulsive forces
                    li.fragment update positions
                    li.highlight-2.fragment handle interaction with other objects
        .right-0.bottom-0
            img.height-400(src=imgAssets+'softbody.gif')
        .left-100.bottom-30
            img.height-350(src=imgAssets+'liquid.jpg')
+frameInbox('Particle Systems')
    .important-orange
        ul
            li.fragment a collection of point masses that obeys certain physical laws
            li.fragment can model complex fuzzy shapes and dynamics
            li.fragment uses Flyweight pattern (array of positions, velocities, group lists)
            li.fragment particles are not only moving points! Even a tree may become a particle
        .list-title.fragment
            p Applications
            ul.leading-md
                li.highlight-2.fragment fluids
                li.fragment visual effects
                li.fragment flocks
                li.fragment rendered trails (plants)
                li.fragment soft bodies (flag, cloth)
        .list-title.fragment
            p Basic model
            ol.leading-md
                li.fragment generate new particles
                li.fragment assign individual attributes
                li.fragment extinguish dead particles
                li.fragment move and transform particles according to their dynamic values
                li.fragment render meshes
        .right-20.bottom-150
            img.height-400(src=imgAssets+'particles.gif')
        .right-350.bottom-150
            img.height-400(src=imgAssets+'flame.gif')