include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/patterns_action/';


+mchapter('Action Patterns', imgAssets+'chapter_patterns_action.svg')
+frameInbox('Data-Passing Components')
    .important-green
        ul
            li.fragment ~visual programming
            li.fragment thinks solely in terms of sending streams of data from one object to another
            li.fragment every component has a set of ports to which a data stream can be connected
            li.fragment requires a visual editor
            li.upside.fragment good for dynamic data processing (shaders, animations, AI decisions)
        .space-lg
        .flex-cols-2
            figure.fragment
                img.height-250(src=imgAssets+'unreal_blueprints.png')
                p Unreal Blueprints
            figure.fragment
                img.height-250(src=imgAssets+'unity_flowcanvas.gif')
                p Unity FlowCanvas
+frameInbox('Example: Godot Editor')
    .important-green
        .text-center
            img.height-750(src=imgAssets+'events_godot.jpg')
+frameInbox('Event System')
    .important-green
        ul
            li.fragment many games are event-based
            li.fragment event system of a game is usually more complex than built-in event emitter
        .scope.fragment
            p What we need
            ul
                li.fragment built-in event emitter
                li.fragment a good way of how to define events for levels (declarative and imperative)
                li.fragment structures for evaluation of conditional events (e.g. history of recent events)
                li.fragment a good visualisation, if the events are branching
        .bottom-0.right-0.fragment
            img.height-440(src=imgAssets+'events_pokemon.jpg')
        .bottom-0.left-50.fragment
            img.height-360(src=imgAssets+'events_owlboy.jpg')
        +tipKeen('Avoid placing conditions in declarative languages').bottom-0
+frameInbox('Chain')
    .important-orange
        ul
            li.fragment <span class="highlight">Process</span> - something that requires more than one frame to finish
                ul
                    li.fragment basically anything that involves animations, mini cut-scenes, delayed actions, sounds
            li.fragment <span class="highlight">Chain</span> - a set of commands, events and processes that need to be evaluated in a given order
            li.mt-20.fragment 
                p.highlight implementation
                ul
                    li.fragment <span class="highlight-2">callbacks</span> - basically in every language, very bad robustness
                    li.fragment <span class="highlight-2">listener chaining</span> - any language with closures (Java, JavaScript, C#,..)
                    li.fragment <span class="highlight-2">iterator blocks</span> - C#
                    li.fragment <span class="highlight-2">promises and generators</span> - JavaScript
                    li.fragment <span class="highlight-2">coroutines</span> - Kotlin, Ruby, Lua,...
        .bottom-0.right-0.fragment
            img.height-400(src=imgAssets+'chain_pokemon.gif')
        .bottom-40.left-40.fragment
            img.height-230(src=imgAssets+'chain.svg')
+frameInbox('Chain Example')
    div
        .code
            include ../../assets/patterns_action/snippets_generated/chain.html 
+frameInbox('Delay')
    .important-green
        ul
            li.fragment an action/event that should happen after a given amount of time
            li.fragment can be implemented by the same facilities as the chain
            li.fragment
                span.highlight always prefer an approach the engine recommends over features built into the scripting language
                ul
                    li.fragment e.g. <span class="highlight-2 code">setTimeout()</span> in JavaScript is invoked from within the event loop, not during an update loop
            li.fragment example: Unity Delayed Invocation
                .code.text-sm.mt-20
                    include ../../assets/patterns_action/snippets_generated/unity_delayed_invocation.html
+frameInbox('Separation of concerns')
    .important-green
        ul
            li.fragment common misuse is to handle complex events in one place
            li.fragment solution: send events and delegate the processing to handlers
            li.downside.fragment in one place
                .code.text-xs
                    include ../../assets/patterns_action/snippets_generated/separation_wrong.html
            li.upside.fragment separated
                .code.text-xs
                    include ../../assets/patterns_action/snippets_generated/separation_good.html
+frameInbox('Example: Quake death script')
    .flex-cols-2
        .code.text-xs
            include ../../assets/patterns_action/snippets_generated/quake.html
        div
            img.height-700.mt-70.ml-80(src=imgAssets+'quake_logo.png')
+frameInbox('Responsibility ownership')
    .important-orange
        ul
            li.fragment(data-fragment-index="1") determines which component should be responsible for given scope/action/decision
            li.fragment(data-fragment-index="2") there is no bulletproof recipe, yet it should be unified
            li.fragment(data-fragment-index="3") if the scope affects <span class="highlight">only one entity</span>, it should be a component attached to that entity
                ul
                    li.fragment(data-fragment-index="4") <span class="highlight-2">example:</span> a worker that goes to the forest for some wood
            li.fragment(data-fragment-index="5") if the scope affects <span class="highlight">more entities</span>, it's often a component/system attached either to an abstract entity up the scene graph (e.g. the root object)
                ul
                    li.fragment(data-fragment-index="6") <span class="highlight-2">example:</span> battle formation controller, duel controller (who wins, who loses)
        .flex-cols-2.mt-15
            figure.fragment(data-fragment-index="4")
                img.height-330(src=imgAssets+'ownership_cossacks3.jpg')
                p Individual units
            figure.fragment(data-fragment-index="6")
                img.height-330(src=imgAssets+'ownership_group_cossacks3.jpg')
                p Battle formation