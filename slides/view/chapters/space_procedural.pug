include ../mixins/containers.pug
include ../mixins/containers_aph.pug

- var imgAssets = '../assets/space_procedural/';


+mchapter('Procedural generation', imgAssets+'chapter_procedural.svg')
+frameInbox('Procedural content generation')
    .important-green
        ul
            li.fragment(data-fragment-index='1') a content that is generated by algoritms
            li.fragment(data-fragment-index='2') the most common usecase - <span class="highlight">procedural textures</span>
            li.upside.fragment(data-fragment-index='3') unlimited number of possible structures
            li.upside.fragment(data-fragment-index='4') lower storage overhead
            li.upside.fragment(data-fragment-index='5') higher gameplay variety and replayability
            li.downside.fragment(data-fragment-index='6') worse quality control
            li.downside.fragment(data-fragment-index='7') we can generate an unplayable world
        .scope.mt-30.fragment(data-fragment-index='8')
            p Games with procedural content
            ul
                li.fragment(data-fragment-index='9') <span class="highlight-2">Rogue (1980)</span> - dungeons
                li.fragment(data-fragment-index='10') <span class="highlight-2">Diablo (1996)</span> - dungeons
                li.fragment(data-fragment-index='11') <span class="highlight-2">OpenTTD (2004)</span> - terrain
                li.fragment(data-fragment-index='12') <span class="highlight-2">Dwarf Fortress (2006)</span> - game content, history, creatures
                li.fragment(data-fragment-index='13') <span class="highlight-2">Spore (2008)</span> - creatures, civilizations, planets
                li.fragment(data-fragment-index='14') <span class="highlight-2">No Man's Sky (2016)</span> - galaxies, planets, flora, fauna
        .top-320.right-480.fragment(data-fragment-index='2')
            img.width-400(src=imgAssets+'procedural_textures.jpg')
        .bottom-40.right-60.fragment(data-fragment-index='11')
            img.width-500(src=imgAssets+'openttd_terrain.png')
        .bottom-500.right-60.fragment(data-fragment-index='9')
            img.width-500(src=imgAssets+'rogue.png')
+frameInbox('Procedural generators')
    .important-green
        .flex-cols-2
            div
                .scope.fragment.fade-up
                    p Terrain generators
                    ul
                        li noise generators
                        li box linear filters (box blur)
                        li midpoint displacement
                .scope.fragment.fade-up
                    p Level generators
                    ul
                        li cyclic generators
                        li marching squares
                        li rule-based generators
                .scope.fragment.fade-up
                    p Pattern generators
                    ul
                        li noise generators
                        li L-Systems
                        li markov chains
            div
                .scope.fragment.fade-up
                    p Filling space
                    ul
                        li random walks
                        li cellular automata
                        li Poisson-disc sampling 
                        li settling
                        li wang tiles
                .scope.fragment.fade-up
                    p Partitioning space
                    ul
                        li binary space partition
                        li voronoi diagrams
                        li dijkstra maps
                        li tree mapping
+frameInbox('Example: Terrain generator')
    div
        ol.spacing-2xl.fragment(data-fragment-index='1')
            li generate a heightmap
            li upscale the heightmap to desired resolution
            li interpolate missing points
            li apply effects (erosion, blur,...)
        .top-60.right-200.fragment(data-fragment-index='1')
            img.height-440(src=imgAssets+'terrain_generator.svg')
        .flex-cols-2
            div.text-center.mt-40.fragment(data-fragment-index='2')
                img.height-320(src=imgAssets+'terrain_generator_heightmap.jpg')
            div.text-center.fragment(data-fragment-index='3')
                img.height-400(src=imgAssets+'terrain_generator_heightmap2.png')
        .bottom-150.left-750.fragment(data-fragment-index='3')
            img.height-80(src=imgAssets+'arrow.svg')
+frameInbox('Example: 2D Level generator')
    div
        ol.spacing-lg
            li create a bounding box
            li split the box into regions (axis-aligned binary splits)
            li optional: skim perimeter regions
            li place connections
            li assign region types
            li make adjustments
    .bottom-0.right-0
        img.height-600(src=imgAssets+'level_generator.svg')
+frameInbox('Example: Settling')
    div
        ol.spacing-lg
            li generate overlapping bounding boxes
            li apply a repulsive force until they no longer overlap
            li generate shapes
            li generate paths
    .bottom-0.right-0
        img.height-700(src=imgAssets+'dungeon_generator.svg')
+frameInbox('Noise')
    .important-orange
        ul
            li.fragment Randomness is used to vary characteristics, noise is used to vary them over time or in space
            li.mt-40.fragment <span class="highlight">Noise functions</span>
                ul
                    li.fragment <span class="highlight-2">Lattice-based</span>
                        ul
                            li.fragment Perlin noise, Simplex noise, Wavelet noise, Value noise
                    li.fragment <span class="highlight-2">Point-based</span>
                        ul
                            li.fragment Worley noise (Voronoi/Cellular)
        .space-md
        .flex-cols-3.fragment
            figure
                img.height-320(src=imgAssets+'noise_perlin.jpg')
                p Perlin Noise
            figure
                img.height-320(src=imgAssets+'noise_simplex.jpg')
                p Simplex Noise
            figure
                img.height-320(src=imgAssets+'noise_worley.jpg')
                p Worley Noise
+frameInbox('Perlin Noise')
    .important-green
        ul
            li.fragment.fade-up <span class="highlight">Perlin Noise</span> - developed by Ken Perlin in 1983
            li.fragment.fade-up <span class="highlight">Simplex Noise</span> - Perlin's another noise, fewer artifacts and lower computational overhead
            li.fragment.fade-up both noises set a pseudo-random lattice in space and interpolate between respective points
            li.fragment.fade-up the noise is constructed from octaves (contribution to the signal at a particular scale)
            li.fragment.fade-up the signal is interpolated via a quartic function 
                include ../../assets/space_procedural/equations_generated/perlin_noise.svg
        .code.text-sm.mt-13.fragment.fade-up
            include ../../assets/space_procedural/snippets_generated/perlin_noise.html
+frameInbox('Fractals')
    ul
        li.fragment.fade-up discovered in 1975
        li.fragment.fade-up geometric shapes that can be subdivided in parts, each of which is a reduced-size copy of the whole
        li.fragment.fade-up used for creating procedural textures and visual effects
        li.fragment.fade-up possible use in vast real-time game worlds is still a subject of discovery 
    .flex-cols-2
        div.height-400.text-center
            img(src=imgAssets+'fractals.jpg')
        div.height-400.text-center
            img(src=imgAssets+'mandelbrot.jpg')
    .bottom-0.left-530
        img.height-300(src=imgAssets+'fractal_city.jpg')