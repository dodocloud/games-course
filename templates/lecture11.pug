doctype html
- var bgr = './static/slides/bgr/bgr_11.jpg'
include ./partial/header.pug
include ./partial/title.pug
include ./partial/containers.pug
include ./partial/texts.pug

+header('MI-APH - Lecture11', 'Lecture 11: Multiplayer', 'lecture11')
// ===================================================== SLIDES =====================================================
.reveal
  .slides
    // ============================================================
    +msection(bgr)
      .lecture-logo.mb80
        include ../static/slides/svg/lecture11/lecture11_logo.svg
      +title('Multiplayer')
    // ============================================================
    +mcontainer(bgr)    
      h3 Literature
      ul
        li
          a(href='https://www.amazon.com/Multiplayer-Game-Programming-Architecting-Networked/dp/0134034309') Glazer, Joshua. 2015. Multiplayer Game Programming
      .center-content
          img(src!='../static/slides/images/lecture11/book_networking.jpg')
    // ============================================================
    +chapter(bgr, 'Networking architecture')
    // ============================================================
    +mframe-statement(bgr, 'Multiplayer')
      ul
        li.highlight offers a capability for multiple players to act within the same game world at the same time
        li.mt30.highlight-sec a very complex feature that has a significant impact on the game architecture, touching almost every fundamental structure 
    // ============================================================
    +mframeOrange(bgr, 'Multiplayer categories')
      .top-content.justify-right.r5
        img.w500(src='../static/slides/images/lecture11/types_single.jpg')
      .top-content.justify-right.r30.t20
        img.w500(src='../static/slides/images/lecture11/types_split.jpg')
      .top-content.justify-right.r5.t40
        img.w500(src='../static/slides/images/lecture11/types_multi.jpg')
      .top-content.justify-right.r30.t60
        img.w500(src='../static/slides/images/lecture11/types_mmo.jpg')
      ul
        li single-screen multiplayer
        li.mt200 split-screen multiplayer
        li.mt200 networked multiplayer
        li.mt200 MMOG
    // ============================================================
    +mframeGreen(bgr, 'Multiplayer history')
      .top-content.justify-right.r30
        img.w500(src='../static/slides/images/lecture11/history_spacewar.jpg')
      .top-content.justify-right.r5.t15
        img.w500(src='../static/slides/images/lecture11/history_empire.jpg')
      .top-content.justify-right.r30.t30
        img.w500(src='../static/slides/images/lecture11/history_doom.jpg')
      .top-content.justify-right.r5.t45
        img.w500(src='../static/slides/images/lecture11/history_quake.jpg')
      .top-content.justify-right.r30.t60
        img.w500(src='../static/slides/images/lecture11/history_ultima.jpg')
      h4 Local multiplayer games
      ul
        li Tennis for Two (1958)
        li Spacewar! (1962)
      h4 Networked multiplayer games
      ul
        li Empire (1973)
        li Maze War (1974)
      h4 Local area network games
      ul
        li Doom (1993)
        li Duke Nukem 3D (1996)
      h4 Online games
      ul
        li Quake (1996)
        li Unreal (1998)
      h4 MMO
      ul
        li Ultima Online (1997)
        li World of Warcraft (2004)
    // ============================================================
    +mframeOrange(bgr, 'Issues')
      ul
        li the main objective: how to synchronize several universes
        li all clients have to achieve a certain degree of synchrony
        li.highlight there is no (known) real-world picture for this type of problem
      ul.mt40
        li impact on the game design - game model, animation engine, sound engine, vehicle model, AI engine, physics,...
      ul.mt40
        li implement multiplayer features into a single-player game is a painful task
        li converting a multiplayer game into a single-player game is trivial
      ul.mt40
        li
          +strtext('', 'Naive approach:', 'transfer a complete game state repeatedly to all clients')
        li
          +strtext('', 'Most common approach:', 'transfer a minimal subset of a game state that is required to reconstruct the complete information')
        li.mt40
          +strtext('', 'Topologies:', 'peer-to-peer, client-server')
    // ============================================================
    +mframeOrange(bgr, 'Peer-to-peer architecture')
      ul
        li each device exchanges data with each other in a fully connected graph
        li
          +strtext('used in', 'Doom,', 'early', 'Command & Conquer, Age of Empires, Starcraft')
        li given 
          include ../build_pre/equations/lecture11/peer_to_peer_01.svg
          |&nbsp;peers, each peer must have 
          include ../build_pre/equations/lecture11/peer_to_peer_02.svg
          |&nbsp;connections -> 
          include ../build_pre/equations/lecture11/peer_to_peer_03.svg
          |&nbsp;in total
        li methods: single master, partial authority, full replication
      .tcenter.mt60
        img.h500(src='../static/slides/svg/lecture11/arch_p2p.svg')
    // ============================================================
    +mframeGreen(bgr, 'Peer-to-peer architecture')
      h4 Single master
      ul
        li one machine is chosen to be the 
          span.highlight-sec game master
        li similar to client/server, but offers server migration upon disconnect
      h4 Partial authority
      ul
        li certain peers have authority over certain parts of the game
        li better bandwidth and processing power balance
        li difficult to implement and debug
        li.highlight-sec each dynamic object belongs to exactly one machine
        li if one player drops out the game, all of the objects over which it had authority must be picked up by other machines
          ul
            li RSP (Referee Selection Problem)
      h4 Full replication
      ul
        li each peer executes the game logic and only events are exchanged
        li hard to synchronize to avoid alternate realities
        li difficult to get the same results (floating point calculations)
        li runs well for a few players over LAN but terribly over the internet
    // ============================================================
    +mframeGreen(bgr, 'Peer-to-peer games')
      h4 Doom (1993)
      ul
        li 14.4 kbps PPP or 28.8 kbps SLIP
        li each turn player inputs were exchanged with other peers
        li you had to wait for the inputs from the most lagged player
        li every 30ms, the input from each player is sampled and placed into a tic command (movement, strafing, turning, use, fire)
        li when the tic commands for all players have been received, the game advances its state
      h4.mt40 Age of Empires (1997)
      ul
        li for 8-player battle there could be up to 400 units
        li used 
          span.highlight-sec Turn timer
          |- queue for commands
        li AoE synchronizes the commands each player issued, rather than units
        li all commands during 200ms are saved into a buffer
        li when the 200ms are over, all the commands for that player's turn are transmitted over the network to all other players 
    // ============================================================
    +mframeOrange(bgr, 'Client-server architecture')
      ul
        li
          include ../build_pre/equations/lecture11/client_server_01.svg
          |&nbsp;devices, 
          include ../build_pre/equations/lecture11/client_server_02.svg
          |&nbsp;connections
        li server must handle 
          include ../build_pre/equations/lecture11/client_server_03.svg
          |&nbsp;more messages per second
        li server quickly becomes the bottleneck (lack of power and bandwidth)
        li it is quite clear which code runs on a server machine
        li
          +strtext('', 'Dedicated server', '- only runs the game state and communicates')
        li
          +strtext('', 'Listen server', '- server is an active participant in the game itself')
      .tcenter.mt60
        img.h500(src='../static/slides/svg/lecture11/arch_client_server.svg')
    // ============================================================
    +mframeGreen(bgr, 'Example: Quake')
      ul
        li the first game that used 
          span.highlight-sec partial reliability
        li each client acts as a dumb terminal
        li outputs are picked up by the 
          span.highlight-sec prediction layer
        li
          +strtext2('the server runs at', '20 FPS,', 'while the client runs at', '60 FPS')
      ul.mt20
        li
          span.highlight Command
          ul
            li the elementary unit of communication
            li used to update a position of the player, orientation, health,...
            li reliable commands (with impact on the game state) have to be confirmed
      .tcenter
        figure
          img.h300(src='../static/slides/svg/lecture11/quake.svg')
          p NetChannel header
    // ============================================================
    +mframe(bgr, 'Example: Starsiege tribes')
      ul
        li sci-fi FPS, released in 1998
        li highly optimized networking model
        li supported up to 128 players over LAN or modem (56.6 kbps)
      ul
        li
          span.highlight-sec Data categories
          ul
            li non-guaranteed data: nonessential to the game
            li guaranteed data: guarantees both arrival and ordering (events)
            li guaranteed critical data: highest priority (player movement)
            li most recent state data: hit points
      .columns-2.tcenter
        div
          img.h400(src='../static/slides/images/lecture11/starsiege.jpg')
        div
          img.h400(src='../static/slides/images/lecture11/starsiege2.jpg')
    // ============================================================
    +mframe(bgr, 'Example: Starsiege networking model')
      ul
        li
          span.highlight Game Simulation Layer
          ul
            li determines what particular client absolutely needs to know and what it ideally should know (need-to-know messages have higher priority)
        li
          +strtext('', 'Ghost Manager', '- replicates or ', '"ghosts"', 'dynamic objects that are relevant')
        li
          +strtext('', 'Move Manager', '- transmits movement data of the player as quickly as possible')
        li
          +strtext('', 'Event Manager', '- maintains a queue of events generated by the simulation')
        li
          +strtext('', 'Stream Manager', '- sends data to the connection manager')
        li
          +strtext('', 'Connection Manager', '- manages a notification of delivery status')
        li
          +strtext('', 'Platform Packet Module', '- socket API wrapper, implements reliability layer')
      .tcenter
        img.h400(src='../static/slides/svg/lecture11/starsiege.svg')
    // ============================================================
    +chapter(bgr, 'Transport')
    // ============================================================
    +mframeGreen(bgr, 'Transport layer')
      .bottom-content.justify-right.fill
        img.h550(src='../static/slides/images/lecture11/duke.png')
      ul
        li
          +strtext('', 'TCP', '- Transmission Control Protocol')
        li
          +strtext('', 'UDP', '- User Datagram Protocol')
        li
          +strtext('', 'DCCP', '- Datagram Congestion Control Protocol')
        li
          +strtext('', 'RUDP', '- Reliable User Datagram Protocol')
        li
          +strtext('', 'SCTP', '- Stream Control Transmission Protocol')
        li
          +strtext('', 'CUSP', '- Channel-based Unidirectional Stream Protocol (used in Irrlicht engine)')
      div
        ul
          li
            span.highlight Well-known ports: 
            | 0-1023
            ul
              li 666: Doom
      div
        ul
          li
            span.highlight Registered ports: 
            | 1024-49151
            ul
              li 2302: Arma
              li 6112: Battle.net
              li 27015: Valve Servers
              li 27500: Quake
              li 28960: Call of Duty
      div
        ul
          li
            span.highlight Private ports: 
            | 49152-65535
    // ============================================================
    +mframeGreen(bgr, 'Transport layer')
      .top-content.justify-right.r10
        img.w1000(src='../static/slides/svg/lecture11/transport_tcp.svg')
      .top-content.justify-right.r10.t65
        img.w1000(src='../static/slides/svg/lecture11/transport_udp.svg')
      ul
        li.mt100 TCP Header
        li.mt500 UDP Header
    // ============================================================
    +mframeGreen(bgr, 'TCP vs UDP')
      .bottom-content.justify-right.fill
        img.h500(src='../static/slides/images/lecture11/multiplayer.gif')
      h4 TCP
      ul
        li header size 20-40B
        li connection-based (requires 3 packets to set up a connection)
        li.upside guaranteed reliability and proper ordering
        li.upside may be prioritized over UDP packets
        li.downside allocates a lot of resources to manage connections
      h4.mt40 UDP
      ul
        li header size 8B
        li.upside lightweight and fast
        li.downside no concept of connection
        li.downside no guarantee of reliability or ordering
        li.downside no flow control
        li.downside may be dropped before TCP packets
    // ============================================================
    +mframeGreen(bgr, 'TCP vs UDP')
      ul
        li games have different requirements than applications
        li some data needs to be confirmed (actions, events), while other doesn't (updates)
        li some data has higher priority (player movement) than other (skin change)
      div
        ul
          li.highlight.mt40 UDP represents a basic streaming approach onto which developers can create any sort of a custom protocol that is most suitable for particular game
      .mt100
        +quote('Using TCP is the worst possible mistake you can make when developing a multiplayer game.', 'Glenn Fielder, 2008')(class="w85, code")
    // ============================================================
    +mframeGreen(bgr, 'Multiplayer engine architecture')
      .tcenter
        img.h500(src='../static/slides/svg/lecture11/multiplayer_architecture.svg')
      ul
        li.highlight-sec the server is running the show and clients only process inputs and display results
        li.mt40
          span.highlight Issues
          ul
            li each player has only partially consistent view of the game world
            li in some cases, the server may disagree with the client's state
            li.highlight-sec there is a delay between taking an action an observing its result
    // ============================================================
    +mframeGreen(bgr, 'Transfer control')
      h4 Connection
      ul
        li when a client wants to join a game, it sends a 
          span.highlight-sec hello packet  
          | to the server
        li once the server receives the hello packet, assigns a 
          span.highlight-sec player ID 
          | and sends a 
          span.highlight-sec welcome packet 
          | to the client, containing the assigned ID
        li when the client receives the welcome packet, saves its player ID and starts sending and receiving replication information to the server
      h4 Reliability
      ul
        li we have to identify packets by using sequence numbers and send them back to the server
        li example: ACK field in the message headers
        li issue: if the server sends 30 PPS and the client only sends 10 PPS, we need at least 3 ACKs included in each packet
      h4 Flow control
      ul
        li clients use basic 
          span.highlight-sec congestion avoidance algorithms
        li servers can change streaming frequency based on the situation
    // ============================================================
    +mframeGreen(bgr, 'Example: Message header')
      ul
        li
          +strtext('', 'SEQ number', '- sequential number')
        li
          +strtext('', 'ACK number', '- number of confirmed message')
        li
          +strtext('', 'ACK bit array', '- confirmation flags for previous 32 messages')
        li
          +strtext('', 'Type', '- type of the message (update, disconnect, command,...)')
        li
          +strtext('', 'ActionID', '- id of particular action')
      .tcenter
        img.h600(src='../static/slides/svg/lecture11/message_header.svg')
    // ============================================================
    +mframeGreen(bgr, 'Message types')(class='line-s')
      h4 Stream
      ul
        li doesn't need to be confirmed, contains a collection of continuous values
        li e.g. dynamic objects and their attributes (transformation)
      h4 Snapshot
      ul
        li complete information of the game state, sent either on demand or at given intervals
      h4 Command
      ul
        li messages that have an impact on the game state, have to be confirmed
        li example: UNIT_CREATED, UNIT_DESTROYED, BUILDING_COMPLETED
      h4 Action
      ul
        li high-priority messages (player's inputs, fire button,...)
      h4 Procedure Call
      ul
        li a generic message that allows to call any function (play sound, load asset, reset animation)
      h4 Connection messages
      ul
        li messages for handshake, ID assignment, disconnect etc.
      h4 Beacon
      ul
        li if the game lingers still (pause, no dynamic objects,...), the client should regularly send beacon messages, informing the server that the connection is still valid
    // ============================================================
    +mframe(bgr, 'Example: Goat attacks')
      ul
        li
          a(href='http://goatattack.net') http://goatattack.net
        li a multiplayer 2D platformer pixel-art shooter
      .tcenter
        img.h700(src='../static/slides/images/lecture11/goatattack.jpg')
    // ============================================================
    +mframe(bgr, 'Example: Goat attacks')
      .bottom-content.justify-right.fill
        img.h400.mb50(src='../static/slides/svg/lecture11/goat_attacks.svg')
      h4 Server-Client messages
      ul.code.big
        li GPCIdentifyPlayer
        li GPCReady
        li GPCAddPlayer
        li GPCRemovePlayer
        li GPCSpawnNPC
        li GPCRemoveNPC
        li GPCChatMessage
      h4 Client-Server messages
      ul.code.big
        li GPSRespawnRequest
        li GPSJoinRequest
        li GPSChatMessage
        li GPSBomb
        li GPSPlayerChanged
    // ============================================================
    +mframe(bgr, 'Serialization')
      ul
        li a large game world can have hundreds of moving objects
        li we need to remove any information that doesn't need to be sent
        li messages should be as close in size to 
          span.highlight-sec MTU (~1500B) 
          | as possible
        li.highlight-sec average MMO packet size is only 30B
      div.mt40
        ul
          li 
            span.highlight Naive approach
          ul
            li massive multiplayer battle
            li 5 players
            li 500 moving units
            li each unit has 20 attributes of 32bit size (transformation and state)
            li the server sends 30 messages per second
            li header size is 30B (240b)
            li required bandwidth: 
              include ../build_pre/equations/lecture11/serialization.svg 
              |&nbsp;Mbps
    // ============================================================
    +mframe(bgr, 'Serialization - binary footprint')
      .bottom-content.justify-right
        img.h200(src='../static/slides/images/lecture05/mage.png')
      .code
        include ../static/slides/snippets/lecture11/serialization.html
      .tcenter
        figure
          img.h300(src='../static/slides/svg/lecture11/serialization_naive.svg')
          p Health = 10, Mana = 14; Little Endian
    // ============================================================
    +mframe(bgr, 'Serialization - streams')
      .bottom-content.justify-right
        img.h200(src='../static/slides/images/lecture05/mage.png')
      ul
        li streams allow us to customize what attributes to serialize and how
      .code
        include ../static/slides/snippets/lecture11/serialization_stream.html
    // ============================================================
    +mframeGreen(bgr, 'Compression')
      h4 Compression of bits
      ul
        li it is helpful to represent values with as few bits as possible
        li using floating point computations doesn't mean that we need all 32/64 bits
        li common technique is to examine the known range and precision
      .tcenter
        img.h200(src='../static/slides/svg/lecture11/compression.svg')
      h4 Entropy encoding
      ul
        li we compress data based on how unexpected it is
        li example: we can assume that the rotation is 99% of its time equal to zero, hence we can use only one bit to indicate this
      .tcenter
        img.h250(src='../static/slides/svg/lecture11/entropy_encoding.svg')
    // ============================================================
    +mframeGreen(bgr, 'Compression')
      h4 Compression of attributes
      ul
        li we can serialize only attributes that vary
        li each object has a bit field that indicates which attributes follow in the stream
      .tcenter
        img.h450(src='../static/slides/svg/lecture11/attributes_compression.svg')
      h4 Delta messages
      ul
        li we store only differences between the current and the previous state
        li very efficient but sensitive to packet loss
      h4 Compression of the payload
      ul
        li Huffman encoding, run-length encoding, LZ4,...
    // ============================================================
    +mframeOrange(bgr, 'Replication')
      ul
        li.highlight the act of transmitting a state of an object from one device to another
        li each object must be uniquely identified (network ID)
        li the network message usually consists of a type of an object and all parameters required to construct this object on all machines
      .code.mt100
        include ../static/slides/snippets/lecture11/replication.html
    // ============================================================
    +mframeOrange(bgr, 'Latency')
      .center-content.justify-right
        img.h500(src='../static/slides/svg/lecture11/latency.svg')
      h4 Latency
      ul
        li the amount of time between an observable cause and its observable effect
        li example: mouse click and a unit responding to its orders
      h4 Suitable latencies
      ul
        li FPS: 16-60ms
        li Virtual reality: < 20 ms
        li RTS: < 500ms
      h4 Non-network latency
      ul
        li input sampling latency (2ms)
        li rendering pipeline latency
      h4 Network latency
      ul
        li processing delay (encryption, routing)
        li transmission delay (time spent writing the bits to a medium)
        li queuing delay (router can only process a limited number of packets at a time)
        li propagation delay (information can't travel faster than the speed of light)
    // ============================================================
    +mframeGreen(bgr, 'Example: Latency')
      ul
        li both clients have the same latency
      .tcenter
        img.h800(src='../static/slides/svg/lecture11/latency_same.svg')
    // ============================================================
    +mframeGreen(bgr, 'Example: Latency')
      ul
        li client B has a higher latency
      .tcenter
        img.h800(src='../static/slides/svg/lecture11/latency_higher.svg')
    // ============================================================
    +chapter(bgr, 'Synchronization')
    // ============================================================
    +mframeGreen(bgr, 'Interpolation')
      .top-content.mt90
        img.w1400(src='../static/slides/svg/lecture11/interpolation_no.svg')
      .top-content.mt150.ml70
        img.w1200(src='../static/slides/images/lecture11/interpolation.png')
      ul
        li client can run at 60 FPS, the server usually sends state updates at 10-30 FPS
      div.mt550
        ul
          li
            +strtext('', 'Interpolation:', 'whenever the client receives a new state, it smoothly interpolates to that state')
          li
            +strtext('', 'Problem:', 'the object might change its interpolated value instantly (teleport)')
    // ============================================================
    +mframeGreen(bgr, 'Interpolation')
      .top-content.fill
        img.w1100(src='../static/slides/svg/lecture11/interpolation_reserve.svg')
      .top-content.mt80.ml50
        img.w950(src='../static/slides/images/lecture11/interpolation2.png')
      .bottom-content
        img.w1200(src='../static/slides/svg/lecture11/extrapolation.svg')
      .top-content.mt550.ml20
        img.w950(src='../static/slides/images/lecture11/interpolation3.png')
      h4 Interpolation reserve
      h4.mt500 Extrapolation
    // ============================================================
    +mframeGreen(bgr, 'Deterministic prediction')
      .bottom-content
        img.w1200.mb30(src='../static/slides/svg/lecture11/deterministic_prediction.svg')
      .bottom-content
        img.w1000.ml100.mb150(src='../static/slides/images/lecture11/interpolation4.png')
      ul
        li interpolation reserve is precise but delayed 1 cycle behind the server
        li precision of extrapolation depends on jittering of the extrapolated attribute
        li.highlight-sec the client is ALWAYS at least 1/2 RTT behind the true state
        li.highlight-sec some attributes can be handled on client side completely (camera pose in FPS and VR)
      div
        ul
          li
            span.highlight Prediction
            ul
              li the client predicts the future value by running the same simulation code
              li to perform extrapolation by 1/2 RTT, the client must approximate the RTT
    // ============================================================
    +mframeGreen(bgr, 'Nondeterministic prediction')
      ul
        li nondeterministic values are hard to predict (steering behaviors, other players' movement,...)
        li solution: make an educated guess and correct it when an update arrives
        li
          +strtext('', 'Dead reckoning', '- process of predicting a behavior of an entity based on the assumption that it will keep doing what it\'s currently doing')
      .tcenter
        figure
          img.h300(src='../static/slides/images/lecture11/misprediction.png')
          p Server simulation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Client misprediction
      ul
        li
          span.highlight Dealing with misprediction
          ul
            li
              +strtext2('', 'Instant state update', '- update immediately when a correct value arrives')
            li
              +strtext2('', 'Interpolation', '- smoothly interpolate to the correct value')
            li
              +strtext2('', 'Second-order state adjustment', '- adjust acceleration instead of velocity')
    // ============================================================
    +mframeGreen(bgr, 'Server-side rewind')
      ul
        li special case - long-range, instant-hit weapon
        li occurs due to the inaccuracies of dead reckoning and time dilation
        li.highlight-sec server may change a state that has already been confirmed
        li.mt40
          span.highlight Valve's Source Engine solution:
          ul
            li rewinds state on the server to exactly the state the player fired
            li server stores the poses of every relevant object for X last frames and looks up the two frames between which the client was interpolating
      .tcenter
        .columns-2
          figure.ml200
            img.h400(src='../static/slides/images/lecture11/cs_wrong.jpg')
            p Wrong
          figure.mr200
            img.h400(src='../static/slides/images/lecture11/cs_correct.jpg')
            p Correct
    // ============================================================
    +mframeGreen(bgr, 'Example: Server-side rewind')
      ul
        li Client B has 3x higher latency than Client A
        li Client B performed a change before Client A did
      .tcenter
        img.h800(src='../static/slides/svg/lecture11/rewind.svg')
    // ============================================================
    +mframeOrange(bgr, 'Latency handling summary')
      h4 Interpolation/extrapolation
      ul
        li smoothens out incoming values by interpolating to them
      h4 Deterministic prediction
      ul
        li runs simulated code, masks latency and keeps the client's state in sync
      h4 Dead reckoning
      ul
        li non-deterministic prediction
        li client uses the last known state of an object to extrapolate future state
      h4 Server-side rewind
      ul
        li the server buffers object positions for several frames to match the client's view when processing instant events
      .tcenter.highlight-third.mt100
        p It is better to be wrong on time than right but late
    // ============================================================
    +mframe(bgr, 'Example: Source engine')
      .bottom-content
        img.h400(src='../static/slides/svg/lecture11/source_engine.svg') 
      .top-content.justify-right.fill
        img.h300.mr400.mt250(src='../static/slides/images/lecture11/lag_compensation.jpg')
      ul
        li
          a(href='https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking') LINK
        li server simulates the world at 30-60 FPS and sends 20 snapshots per second by default, using an interpolation reserve of 100ms
        li client samples inputs at 30-60 FPS and buffers snapshots for 100 ms
        li server uses time dilation and rewind
    // ============================================================
    +mframe(bgr, 'MMOG')
      ul
        li Massively Multiplayer Online Game
        li Ultima Online, World of Warcraft, Guild Wars, Skyforge, Elder Scrolls Online
        li
          span.highlight interaction is not really massive
          ul
            li players can only interact with a limited amount of players at the same time (~100)
            li when more than the expected number of players gather together, the game may crash
      .tcenter
        figure
          img.h500(src='../static/slides/images/lecture11/wow.jpg')
          p Swifty Invasion
    // ============================================================
    +mframeGreen(bgr, 'Object Relevancy')
      ul
        li an object is considered relevant for a client when it should be informed about its updates
        li in a MMOG, it may not be important to know about players several miles away
        li similar sort of problems as visibility culling (or spheres of influence)
        li.mt40
          span.highlight Static zones
          ul
            li split the world into regions and assign a separate process/server to each region
            li only objects in the same zone as the player are relevant
        li
          span.highlight Server partitioning
          ul
            li extension to the static zones, no direct interaction between players in two separate zones
            li WoW - each continent runs on a separate server process
        li
          span.highlight Instancing
          ul
            li one shared game supports several separate instances at once
            li example: dungeons in WoW, Dota/LoL tournaments
    // ============================================================
    +mframe(bgr, 'Example: Ultima online')
      ul
        li network is based on 
          span.highlight-sec Pastry DHT 
          |(distributed hash tables)
        li world is split into regions of size based on the amount of players
        li each region is assigned an ID and mapped into the DHT
        li each node is responsible for exactly one region
        li.mt40
          span.highlight 3 data types
          ul
            li
              +strtext2('', 'static objects', '- immutable part of the world (terrain)')
            li
              +strtext2('', 'dynamic objects', '- interactive items and NPCs, deterministic')
            li
              +strtext2('', 'avatars', '- players, nondeterministic')
      .columns-3.tcenter
        div
          img.h350(src='../static/slides/images/lecture11/ultima.jpg')
        div
          img.h350(src='../static/slides/images/lecture11/ultima2.jpg')
        div
          img.h350(src='../static/slides/images/lecture11/ultima3.jpg')
    // ============================================================
    +mframeGreen(bgr, 'Security')
      h4 Classic threats
      ul
        li packet sniffing, phishing, man-in-the-middle
        li
          +strtext2('', 'ghosting', '- scouting the players using multiple connections')
      h4 Input validation
      ul
        li players can't perform an action that is invalid
        li only a client responsible for Player A can send an action that affects that player
        li client should validate the messages from server as well
      h4 Software cheat detection
      ul
        li actively monitors the integrity of the game
        li cheating SW can hook into the game, overwrite memory, modify files
        li
          +strtext2('', 'map hacking', '- removing fog of war and revealing resources')
        li
          +strtext2('', 'bot cheat', '- bot that either plays the game or assists the player')
          ul
            li e.g. WoW - dummy levelling up, aimbot in Fortnite,...
        li
          +strtext2('', 'Valve Anti-Cheat', '- available for games that utilize Steamworks SDK')
          ul
            li maintains a list of banned users, scans for known cheat programs
        li
          +strtext2('' ,'Warden', '- used by Blizzard')
    // ============================================================
    +mframe(bgr, 'Libraries')
      h4 Torque Network Library (opentnl)
      ul
        li used in Torque engine
        li uses "Ghost structures" for object replication
        li
          a(href='https://github.com/kocubinski/opentnl') https://github.com/kocubinski/opentnl
      h4 ReplicaNet
      ul
        li powerful library for object sharing (sessions)
        li expensive
      h4 RakNet
      ul
        li complex networking library
        li free since 2014
        li
          a(href='https://github.com/facebookarchive/RakNet') https://github.com/facebookarchive/RakNet
      h4 NetStalker
      ul
        li library for interpolated object replication
        li created as a bachelor thesis at FEL CTU
        li
          a(href='https://github.com/smrkous/nsl') https://github.com/smrkous/nsl
    // ============================================================
    +mframe(bgr, 'Example: Unity multiplayer')
      .bottom-content.justify-right
        img.h700(src='../static/slides/images/lecture11/unity_network_transform.png') 
      .bottom-content.justify-left.ml50
        img.h500(src='../static/slides/images/lecture11/unity.gif')
      ul
        li uNet networking library, client-server topology
        li.highlight deprecated, new system is under development
        li very easy integration due to its component architecture
        li requesting values (unreliable and reliable), RPC, commands,...
        li NetworkTransform - synchronizes movement
        li NetworkAnimator - synchronizes animations
        li NetworkBehaviour - script for commands and RPC
    // ============================================================
    +mframe(bgr, 'Lecture 11 summary')
      ul
        li
          +btext('', 'Multiplayer:', 'offers the capability for multiple players to interact within the same game world at the same time')
        li.mt40
          +btext('', 'Multiplayer categories:', 'single-screen, split-screen, networked, MMOG')
        li
          +btext('', 'Topologies:', 'peer-to-peer, client-server')
        li
          +btext('', 'Message types:', 'stream, snapshot, command, action, procedure call, connection, beacon')
        li
          +btext('', 'Latency:', 'amount of time between an observable cause and its observable effect')
      div.mt50.mb50.tcenter
        b The client is ALWAYS at least 1/2 RTT behind the true state
      ul
        li 
          +btext('', 'Latency handling:', 'extrapolation, prediction, server-side rewind')
        li
          +btext('', 'Security issues:', 'scouting, map hacking, bot cheat')
    // ============================================================
    +gbquote(bgr, 'A famous explorer once said, that the extraordinary is in what we do, not who we are.', 'Lara Croft, Tomb Raider 2013')(class="w80")




include ./partial/footer.pug
script(src!='../libs/revealjs/revealjs.ts')
script(src!='../src/lectures/reveal-setup.ts')
