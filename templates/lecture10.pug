doctype html
- var bgr = './static/slides/bgr/bgr_10.jpg'
include ./partial/header.pug
include ./partial/title.pug
include ./partial/containers.pug
include ./partial/texts.pug

+header('MI-APH - Lecture10', 'Lecture 10: Scripting languages', 'lecture10')
// ===================================================== SLIDES =====================================================
.reveal
  .slides
    // ============================================================
    +msection(bgr)
      .lecture-logo.mb80
        include ../static/slides/svg/lecture10/lecture10_logo.svg
      +title('Scripting languages')
    // ============================================================
    +mframeOrange(bgr, 'Scripts')
      h4 Script
      ul
        li a piece of code that performs a specific task
        li originally, scripts were simple languages for punch-cards processing
      h4 Scripting language
      ul
        li
          span.highlight common definition: 
          | a scripting language is a high-level language that can be interpreted by another program at runtime
        li it is more about an environment than the language itself - even C/C++ can be considered as a scripting language if loaded by an interpreter
        li C# is compiled into byte-code that is interpreted at runtime by .NET, yet most people don't consider it as a scripting language
      h4 Common characteristics
      ul
        li economy of expression
        li flexible dynamic typing
        li easy access to other programs
    // ============================================================
    +mframe(bgr, 'Scripting languages in games')
      ul
        li as games grow in size, the time required to compile the code increases
      h4 Scripts in games
      ul
        li allow rapid prototyping
        li can be reloaded at runtime
        li can separate gameplay and core components
        li can be exposed to the end users to mod the game
        li can be used as a quick way of reading variables and game data
      .tcenter
        figure
          img.h400(src='../static/slides/images/lecture10/monkey.png')
          p Monkey Island 2
    // ============================================================
    +mframe(bgr, 'Example: Arma 2 SQS script')
      .top-content.justify-right
        img.h500(src='../static/slides/images/lecture10/arma.jpg')
      .code
        include ../static/slides/snippets/lecture10/sqs.html
    // ============================================================
    +mframe-m(bgr, 'Example: Hexen ACS script')
      .top-content.justify-right
        img.h500(src='../static/slides/images/lecture10/hexen.jpg')
      .code
        include ../static/slides/snippets/lecture10/acs.html
    // ============================================================
    +mframe(bgr, 'Example: Godot script')
      .bottom-content.justify-right
        img.h400.mb40(src='../static/slides/images/lecture10/pong.jpg')
      .code
        include ../static/slides/snippets/lecture10/godot.html
    // ============================================================
    +mframe(bgr, 'Scripting languages in games')
      .center-content
        img(src!='../static/slides/images/common/bulb_green&8.png')
      .languages
        p Game Marker Language
        p Java
        p C#
        p TorqueScript
        p JavaScript
        p AngelScript
        p Squirrel
        p Python
        p Lua
        p GDScript
        p UnrealScript
        p Kotlin
        p TypeScript
        p ActionScript
    // ============================================================
    +mframe(bgr, 'Javascript engines')(class='space-vert-l')
      h4 Duktape
      ul
        li small footprint, easily embeddable ECMAScript 5.1 engine (limited support of ECMA2015)
        li used in Atomic Game Engine
      h4 MuJS
      ul
        li lightweight embeddable JavaScript interpreter
      h4 Tiny-JS
      ul
        li minimal interpreter written in C++
      h4 SpiderMonkey
      ul
        li Mozilla's engine written in C/C++
      h4 Chrome V8 (7.9)
      ul
        li used in Couchbase, Chrome, MongoDB, NodeJS
        li compiles JavaScript directly into native code
        li X86, ARM, MIPS, ported to PowerPC
    // ============================================================
    +mframeGreen(bgr, 'Scripting architectures')
      h4 Scripted callbacks
      ul
        li the engine's functionality is hard-coded in the native programming language, but certain functions are customizable (Blender)
      h4 Scripted event handler
      ul
        li a hook function whose purpose is to allow a game object to respond to some relevant occurrence within the game world (in-game scripts)
      h4 Scripted components or properties
      ul
        li new components or property objects may be constructed partially or entirely in script
        li used in Dungeon Siege
      h4 Script-driven engine
      ul
        li script drives the entire engine system (PixiJS, p5.js)
      h4 Script-driven game
      ul
        li script is running the show and the native engine code acts as a library
        li in this case, the engine can be used as a stand-alone library
    // ============================================================
    +mframeGreen(bgr, 'Game Engine script API')
      .tcenter
        img.h900(src='../static/slides/svg/lecture10/scripting_engine.svg')
    // ============================================================
    +mframeOrange(bgr, 'Game Engine script API')
      ul
        li the engine needs to communicate with the scripting part - provided by 
          span.highlight bridges
          ul
            li JNI (Java - C++)
            li P/Invoke (.NET - C++)
            li LuaBridge (Lua - C++)
            li Dukbind (Duktape JS - C++)
      ul
        li bridge is a performance bottleneck, especially for per-frame calls
        li more scripting languages -> more bridges to maintain
        ul
          li crossing the boundary between C++ and the script is slow while marshalling a large amount of data
      ul
        li
          span.highlight Marshalling
          ul
            li transforming the memory representation of an object between two domains (different programming languages)
        li
          span.highlight Semantic gap
          ul
            li descriptive difference of an object in various representations (relational database, object-oriented structure)
    // ============================================================
    +mframe-m(bgr, 'Atomic Game Engine JS API')
      .code
        include ../static/slides/snippets/lecture10/age_jsapi.html
    // ============================================================
    +mframe-m(bgr, 'Example: Atomic Game Engine C# API')
      .code
        include ../static/slides/snippets/lecture10/age_capi.html
    // ============================================================
    +mframe-m(bgr, 'Example: Openframeworks Lua API')
      .code
        include ../static/slides/snippets/lecture10/openframeworks.html
    // ============================================================
    +mframeGreen(bgr, 'Lua')
      .bottom-content.justify-right
        img.h300.mb100.mr100(src='../static/slides/images/lecture10/lua.png')
      ul
        li lightweight, multi-paradigm programming language
        li started as an in-house C/C++ extension language for several projects
        li offers object-oriented, functional and data-driven programming
        li written in ANSI C, MIT license
        li.mt40 
          span.highlight Lua engine
          ul
            li from its authors, current version 5.3.4
        li
          span.highlight Lua JIT engine
          ul
            li Just-in-time compiler for Lua (uses DynASM)
            li API-compatible with Lua 5.1
            li ~10x faster than pure Lua
        li
          span.highlight Features
          ul
            li closures
            li coroutines
            li first-class functions
            li size under 200KB
    // ============================================================
    +mframeGreen(bgr, 'Lua usages')
      .center-content
        img(src!='../static/slides/images/lecture10/lua.png')
      .lua-usage
        p Adobe Photoshop Lightroom
        p Simcity 4
        p VLC Media Player
        p Far Cry
        p Civilization 5
        p Trading platforms
        p Wireshark
        p Supreme Commander
        p Angry Birds
        p World of Warcraft
        p Baldur's gate
        p Apache HTTP Server
        p MySQL Workbench
        p Escape From Monkey Island
    // ============================================================
    +mframe(bgr, 'Example: World of Warcraft')
      .center-content
        img.h500.mt150(src='../static/slides/images/lecture10/wow.jpg')
      .code
        include ../static/slides/snippets/lecture10/wow.html
    // ============================================================
    +mframe(bgr, 'Example: Arkanoid Typescript')
      .bottom-content.justify-right
        img.h500(src='../static/slides/images/lecture10/arkanoid.png')
      .code
        include ../static/slides/snippets/lecture10/arkanoid_ts.html
    // ============================================================
    +mframe(bgr, 'Example: Arkanoid C++')
      .bottom-content.justify-right
        img.h500(src='../static/slides/images/lecture10/arkanoid.png')
      .code
        include ../static/slides/snippets/lecture10/arkanoid_cpp.html
    // ============================================================
    +mframe(bgr, 'Example: Arkanoid Lua')
      .bottom-content.justify-right
        img.h500(src='../static/slides/images/lecture10/arkanoid.png')
      .code
        include ../static/slides/snippets/lecture10/arkanoid_lua.html
    // ============================================================
    +mframe(bgr, 'Lecture 10 summary')(class='line-l')
      ul
        li
          +btext('', 'Script:', 'a piece of code that performs a specific task')
        li
          +btext('', 'Scripting language:', 'a high-level language that can be interpreted at runtime')
        li
          +btext('', 'Marshalling:', 'transforming a memory representation of an object between two domains')
        li
          +btext('', 'Semantic gap:', 'descriptive difference of an object in various representations')
    // ============================================================
    +gbquote(bgr, 'M-M-M-MONSTER KILL!', 'Unreal Tournament')(class="w60")



include ./partial/footer.pug
script(src!='../libs/revealjs/revealjs.ts')
script(src!='../src/lectures/reveal-setup.ts')
