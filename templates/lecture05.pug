doctype html
- var bgr = './static/slides/bgr/bgr_05.jpg'
include ./partial/header.pug
include ./partial/title.pug
include ./partial/containers.pug
include ./partial/texts.pug

+header('MI-APH - Lecture05', 'Lecture 5: Game Programming Patterns', 'lecture05')
// ===================================================== SLIDES =====================================================
.reveal
  .slides
    // ============================================================
    +msection(bgr)
      .lecture-logo.mb80
        include ../static/slides/svg/lecture05/lecture05_logo.svg
      +title('Game Programming Patterns')
    // ============================================================
    +mcontainer(bgr)    
      h3 Literature
      a(href='https://www.amazon.com/Game-Programming-Patterns-Robert-Nystrom/dp/0990582906') Nystrom, Robert. 2014. Game Programming Patterns
      .center-content
        .w600
          img(src!='../static/slides/images/lecture05/book_programming_patterns.jpg')
    // ============================================================
    +chapter(bgr, 'Serialization')
    // ============================================================
    +mframeGreen(bgr, 'Object Serialization')(class='space-vert-m')
      h4 Serialized descriptors
      ul
        li XML, JSON, INI, CFG,...
        li some languages (C++) don't provide a standardized serialization facility
        li JSON is a good fit for JavaScript as it is it's natural object notation
      h4 Database
      ul
        li Web environment: Web storage (small data), IndexedDB (large data)
        li 
          +strtext('Desktop/mobile:', 'SQLite, CastleDB,...')
        li Games that don't have a multiplayer facility rarely need more than a simple database for config and save data
      h4 Save data
      ul
        li dump of all the parts of the game required to restore the full state
        li size varies, for most of the games it's usually several MB
    // ============================================================
    +mframeGreen(bgr, 'Example: Web storage')
      h4 Local Storage
      ul
        li for data of a smaller size (config, game state)
        li up to 10MB, no expiration time
        li keys and values are <strong>strings</strong>
      div.code.ml40
        include ../static/slides/snippets/lecture05/local_storage.html
      h4 IndexedDB
      ul
        li JS-based object-oriented DB
        li low-level API for structured data, including files/blobs
        li a bit cumbersome, yet many wrappers have been developped, such as 
          a(href='https://dexie.org/') DEXIE
      div.code.ml40
        include ../static/slides/snippets/lecture05/indexeddb.html
    // ============================================================
    +mframeGreen(bgr, 'Example: OpenTTD save format')
      .bottom-content.justify-left
        img.h90.mb80(src='../static/slides/svg/lecture05/save_openttd.svg')
      .bottom-content.justify-right
       img.w45.mb100(src='../static/slides/images/lecture03/transport_tycoon.gif')
      .top-content.justify-right
        div.w800
          ul.tleft
            li 3 data layers
            li very complex format
    // ============================================================
    +mframeGreen(bgr, 'Example: Doom save format')
      div.columns-2
        ul
          li DSG files
          li the game loads the level and restores the state by going through its aspects
          li virtually nullifies the feasibility of the manual hacking except the player data
          li
            h4.mt30 Aspects:
            ul
              li doors, switches, elevators, stairs, lights
              li items picked/available
              li projectiles/teleport fog/respawn
              li animation, damage
              li linedefs seen on automap
              li items/kills gained counter
        div
          a(href="https://github.com/id-Software/DOOM/blob/master/linuxdoom-1.10/p_saveg.c") LINK
          div.code
            include ../static/slides/snippets/lecture05/doom_save.html
    // ============================================================
    +mframe(bgr, 'Custom save data')
      h4 Serialized object
      ul
        li either dump binary data or text files (JSON, XML,...)
        li circular dependencies and pointers need to be handled manually
      h4 Parsable format
      ul
        li binary format or a text file
        li text file is a good choice if the content isn't very large and security isn't concerned
      figure.h500
        img(src="../static/slides/images/lecture05/txt_map.png")
        p Grid-based map in .txt file
    // ============================================================
    +chapter(bgr, 'Performance')
    // ============================================================
    +mframeGreen(bgr, 'Performance issues')(class='space-vert-m')
      div.columns-2
        div.w80
          h4 Memory caching issues
          ul
            li CPU first tries to find data in the L1 cache
            li then it tries the larger but higher-latency L2 cache
            li then it tries L3 cache and DDR memory
          h4 Avoiding cache miss
          ul
            li arrange your data in RAM in such a way that min cache misses occure
            li organise data in contiguous blocks that are as small as possible
            li avoid calling functions from within a performance-critical section of code
          h4 Avoiding branch missprediction
          ul
            li <strong>branch<strong/> = when you use an IF statement
            li pipelined CPU tries to guess at which branch is going to be taken 
            li if the guess is wrong, pipeline must be flushed
        div.code
          include ../static/slides/snippets/lecture05/memory_cache.html
    // ============================================================
    +mframeGreen(bgr, 'Memory gap')(class='space-vert-m')
      ul
        li we can process data faster than ever, yet we can't get that data faster
        li RAM isn't so random access anymore
        li it can take hundreds of cycles to fetch a byte of data from RAM
        li algorithm full of cache misses can be up to 50x slower
      div.tcenter.mt50
        img.h600(src='../static/slides/svg/lecture05/moore_law.svg')
    // ============================================================
    +mframe(bgr, 'Example: data stored randomly in memory')
      .center-content
        img.w95(src='../static/slides/svg/lecture05/memory_issues.svg')
    // ============================================================
    +mframe(bgr, 'Example: data stored sequentially ')
      .center-content
        img.w95(src='../static/slides/svg/lecture05/memory_issues_2.svg')
    // ============================================================
    +mcontainer(bgr)(class="center-content")
      div.tcenter
        h2 Programming patterns
        h3.fragment.fade-in.highlight or... just a few ideas and suggestions
    // ============================================================
    +mframeOrange(bgr, 'Two-stage initialization')
      div.bottom-content.justify-right
        img.w600(src='../static/slides/images/lecture05/brainbot.gif')
      ul
        li Avoids passing everything through the constructor
        li <strong>Constructor</strong> creates an object, <strong>init</strong> method initializes it
        li.upside Objects can be initialized several times
        li.upside Objects can be allocated in-advance in a pool
      div.code.mt20
        include ../static/slides/snippets/lecture05/two_stage.html
    // ============================================================
    +mframeGreen(bgr, 'Separation of concerns')(class='separation')
      ul
        li a common misuse is to handle complex events in one place
        li solution: send messages and let other parts of the game worry
      ul
        li.downside in one place
        div.code.mt10
          include ../static/slides/snippets/lecture05/separation_atonce.html 
        li.upside separated
        div.code.mt10
          include ../static/slides/snippets/lecture05/separation_divided.html 
    // ============================================================
    +mframeGreen(bgr, 'ID generator')
      div
        ul
          li a simple way how to generate consecutive integers
          li.highlight.mt30 Java (thread-safe)
          div.code.mt20
            include ../static/slides/snippets/lecture05/id_java.html
      div.columns-2
        ul
          li.highlight TypeScript, using a generator
          div.code.mt20
            include ../static/slides/snippets/lecture05/id_generator.html
        ul
          li.highlight TypeScript, using a static variable
          div.code.mt20
            include ../static/slides/snippets/lecture05/id_static.html
    // ============================================================
    +mframeOrange(bgr, 'State')
      div.bottom-content.justify-right
        img.w500(src='../static/slides/images/lecture05/jump.gif')
      ul
        li several meanings (state of the whole game, internal state of entities,...) 
        li in this context, it is just a member of a set, determining what actions an object may execute
        div.code.mt80
          include ../static/slides/snippets/lecture05/state.html
    // ============================================================
    +mframeOrange(bgr, 'Flags')
      .bottom-content.justify-left
        img.w70.mb100.ml50(src='../static/slides/svg/lecture05/flag.svg')
      .bottom-content.justify-right
        img.w10.mb100.mr50(src='../static/slides/images/lecture05/mage.png')
      ul
        li <strong>bit array</strong> that stores binary properties of game objects
        li may be used for queries (e.g. find all <strong>DEAD</strong> objects)
        li similar to a state machine but behaves differently
        li if we maintain all flags within one single structure, we can search very fast
    // ============================================================
    +mframeGreen(bgr, 'Example: Flag Table')
      div.center-content
        img.w1400(src='../static/slides/svg/lecture05/flag_table.svg')
      div.bottom-content.justify-left.ml100
        img.h500.mb60.ml30(src='../static/slides/images/lecture05/flag_units.png')
    // ============================================================
    +mframeOrange(bgr, 'Dirty Flag')
      ul
        li marks changed objects
        li can be applied to various attributes (animation, physics, transformation)
        li you have to make sure to set the flag every time the state changes
        li you have to keep the previous derived data in memory
      h4 Cleaning
      ul
        li When the result is needed
        ul
          li.upside Avoids doing recalculation if the result is never used
          li.downside Game can freeze for expensive calculations
        li At well-defined checkpoints
        ul
          li.upside less impact on user experience
          li.downside you never know, when it happens
        li On the background
        ul
          li.upside You can do more redundant work
          li.downside race-condition may occur
    // ============================================================
    +mframeGreen(bgr, 'Example: Atomic Game Engine markdirty')(class='code')
      include ../static/slides/snippets/lecture05/dirty_age.html
    // ============================================================
    +mframeGreen(bgr, 'Example: PIXI Container sort')(class='code')
      include ../static/slides/snippets/lecture05/dirty_pixi.html
    // ============================================================
    +mframeGreen(bgr, 'String hash')
      ul
        li in C++, strings are expensive to work at runtime,  
          strong.code strcmp 
          | has <i>O(n)</i> complexity
        ul
          li luckily, many scripting engines use <strong>string interning</strong> 
        li game engines widely use <strong>string hash</strong> which maps a string onto a semi-unique integer
        li algorithms: djb2, sdbm, lose lose,...
      ul
        li.highlight example: sdbm
      div.code.ml40.mt20
        include ../static/slides/snippets/lecture05/sdbm.html
    // ============================================================
    +mframeOrange(bgr, 'Builder')(class="builder")
      div.bottom-content.justify-right
        img.w350.mb200.mr200(src='../static/slides/images/lecture05/builder.gif')
      ul
        li slightly different from the builder defined by <strong>GoF</strong>
        li stores attributes needed to build a game object, can be used to build several objects
        li <strong>Aspect</strong> in Artemis framework, <strong>Prefab</strong> in Unity
        div.code.mt20
          include ../static/slides/snippets/lecture05/builder.html
    // ============================================================
    +mframeOrange(bgr, 'Factory')
      ul
        li <strong>Builder</strong> assembles an object, <strong>factory</strong> manages the assembling
        li Factory creates an object according to the parameters but with respect to the context
        div.code.mt50
          include ../static/slides/snippets/lecture05/factory.html
    // ============================================================
    +mframeGreen(bgr, 'Value provider')
      ul
        li instead of passing a value, we pass a function pointer that returns this value
        li may generate new values upon every call or just return a value according to the context
        div.code.mt50
          include ../static/slides/snippets/lecture05/provider.html
    // ============================================================
    +mframeOrange(bgr, 'Flyweight')
      ul
        li an object holds shared data to support large number of fine-grained objects
        li example: instanced rendering, geometry hashing, <strong>particle systems</strong>
      .tcenter
        img.w75(src='../static/slides/svg/lecture05/flyweight.svg')
    // ============================================================
    +mframeOrange(bgr, 'Replay')
      .bottom-content.justify-left.fill
        img.w10(src='../static/slides/images/lecture05/braid_c.png')
      .bottom-content
        img.h20.mb80(src='../static/slides/images/lecture05/braid_b.png')
      .bottom-content.justify-right.fill
        img.w30(src='../static/slides/images/lecture05/braid_a.png')
      ul
        li allows to reproduce any state of a game at any time 
        li much more complex than the save mechanism
        li all game entities must have a reproducible behavior (similar to multiplayer facility)
        li two main impediments: random functions and nondeterministic operations
      ul
        li
          strong Solution a)
        ul
          li store the state of all objects in the game - either on frame basis or at a fixed frequency
          li reproduce them by modifying all objects at each frame
        li 
          strong Solution b)
        ul
          li if the game is completely message-driven, we can store all game messages
          li during the replay, forbid all components to send messages on their own
          li send queued messages one by one and let them be processed
    // ============================================================
    +mframeGreen(bgr, 'Example: Doom DEMO file')
      ul
        li Lump file (*.LMP)
        li Doom (1993) used fixed time-loop at a rate of 35 FPS (<strong>tic</strong> command)
        li the file contains <strong>ONLY</strong> keyboard inputs at each tick
        li the game plays the demo, bypassing input commands from the demo file
        li 13B header + 4B data for each tick ~ <strong>140B/s</strong>
      div.tcenter
        img.w950(src='../static/slides/svg/lecture05/doom_save.svg')
    // ============================================================
    +chapter(bgr, 'Case study: Tower defense')
    // ============================================================
    +mframe(bgr, 'Tower defense')
      h4 Goal
      ul
        li to defend a portal, obstructing the attackers by placing defensive structures along their path
        li the base must survive waves of multiple enemies
      h4 Common features
      ul
        li ability to build, repair and upgrade towers
        li enemies capable of traversing multiple paths
        li enemies capable of destroying towers
      div.columns-2
        figure
          img.h400(src='../static/slides/images/lecture05/rampart.gif')
          p Rampart (1990)
        figure
          img.h400(src='../static/slides/images/lecture05/dungeon_def.gif')
          p Dungeon Defenders 2 (2017)
    // ============================================================
    +mcontainer(bgr)
      h3 Tower defense games
      .center-content
        img.w100(src='../static/slides/images/lecture05/tower_def.jpg')
    // ============================================================
    +mframe(bgr, 'Proposed features')
      ul
        li Grid map
        li Indestructible towers
        li No obstructions on the path
        li No flying enemies
        li Active towers - fire projectiles
        li Passive towers - radiate energy
      div.tcenter
        img.h500(src='../static/slides/images/lecture05/tower_example.jpg')
    // ============================================================
    +mframe(bgr, 'Map model')
      div.tcenter
        img.h850(src='../static/slides/svg/lecture05/tower_defense_abstract_map.svg')
    // ============================================================
    +mframe(bgr, 'Data model')
      div.tcenter
        img.h850(src='../static/slides/svg/lecture05/tower_defense_model.svg')
    // ============================================================
    +mframe(bgr, 'Entities')(class='entities')
      ul
        li
          +strtext('', 'Level', '- aggregates all objects of the current level')
        li
          +strtext('', 'Map', '- grid map')
        li
          +strtext('', 'Tile', '- a map cell of a given type')
        li
          +strtext('', 'Player', '- player that controls all towers')
        li
          +strtext('', 'Wave', '- a single wave')
        li
          +strtext('', 'Creep', '- spawned creep')
        li
          +strtext('', 'CreepPrototype', '- keeps default attributes of each creep')
        li
          +strtext('', 'Tower', '- tower placed on a map')
        li
          +strtext('', 'TowerPrototype', '- keeps default attributes of each tower')
        li
          +strtext('', 'Portal', '- end of the road that needs to be defended')
        li
          +strtext('', 'Projectile', '- a tower projectile')
      div.columns-2
        div
          figure.h400
            img.h250(src='../static/slides/images/lecture05/towerdef_towers.png')
            p Arcane Archer Cannon Crossbow Dark
        div
          figure.h400.mt40
            img.h150(src='../static/slides/images/lecture05/towerdef_creeps.png')
            p.mt70 Gremlin Goblin Imp Giant
    // ============================================================
    +mframe(bgr, 'Game attributes')
      div.tcenter.center-content
        img.h900(src='../static/slides/svg/lecture05/tower_attributes.svg')
    // ============================================================
    +mframe(bgr, 'Game components')
      div.tcenter.center-content
        img.h800(src='../static/slides/svg/lecture05/tower_components.svg')
    // ============================================================
    +mframe(bgr, 'Tower states')
      div.tcenter.center-content
        img.h500(src='../static/slides/svg/lecture05/tower_states.svg')
    // ============================================================
    +mframe(bgr, 'Game events')
      div.tcenter.center-content
        img.h700(src='../static/slides/svg/lecture05/tower_messages.svg')
    // ============================================================
    +mframe(bgr, 'Lecture 5 Review')(class='line-m')
      div
        b Programming patterns:
      ul
        li 
          span.highlight two-stage initialization  
          |- avoids passing everything through the constructor
        li 
          span.highlight state 
          | - a variable determining what actions an object may execute 
        li
          span.highlight flags 
          | - a bit array that stores binary properties of game objects 
        li 
          span.highlight dirty flag 
          | - marks changed objectgs 
        li 
          span.highlight builder 
          | - stores attributes needed to create a game object 
        li 
          span.highlight factory 
          | - manages the way new objects are created
        li 
          span.highlight flyweight 
          | - holds shared data to support large number of objects
        li 
          span.highlight replay 
          | - allows to reproduce any state of the game at any time
    // ============================================================
    +gbquote(bgr, 'I\'m blind, not deaf', 'Illidan Stormrage, Warcraft', false)(class="w50")

include ./partial/footer.pug
script(src!='../libs/revealjs/revealjs.ts')
script(src!='../src/lectures/reveal-setup.ts')
