doctype html
- var bgr = './static/slides/bgr/bgr_06.jpg'
include ./partial/header.pug
include ./partial/title.pug
include ./partial/containers.pug
include ./partial/texts.pug

+header('MI-APH - Lecture06', 'Lecture 6: Math and Dynamics', 'lecture06')
// ===================================================== SLIDES =====================================================
.reveal
  .slides
    // ============================================================
    +msection(bgr)
      .lecture-logo.mb80
        include ../static/slides/svg/lecture06/lecture06_logo.svg
      +title('Math and Dynamics')
    // ============================================================
    +mcontainer(bgr)    
      h3 Literature
      a(href='https://www.amazon.com/Essential-Mathematics-Games-Interactive-Applications/dp/0123742978') Verth, Van. 2008. Essential Mathematics for Games and Interactive Applications
      .center-content
        .w600
          img(src!='../static/slides/images/lecture06/book_math_for_games.jpg')
    // ============================================================
    +chapter(bgr, 'Randomness')
    // ============================================================
    +mframeGreen(bgr, 'Generative algorithms')(class='line-m')
      div.bottom-content.justify-right.fill
        img.h100(src='../static/slides/images/lecture06/generative_alg.png')
      ul
        li.highlight Random functions
        li.highlight Noise functions 
        li.highlight Fractals
    // ============================================================
    +mframe-statement(bgr, 'Randomness in games')
      p Randomness is one of the most critical factors in ensuring an engaging game. Random events turn the game into a strict uncertainty, causing players to analyze the opportunity costs of their choices.
    // ============================================================
    +mframeGreen(bgr, 'Random generator methods')
      h4 LCRNG
      ul
        li Linear Congruential Random Number Generator
        li
          include ../build_pre/equations/lecture06/random_generator_methods_01.svg
        li starts with a seed value and performs some arithmetic operations which is 
          span.highlight-sec both 
          | returned and used to reseed the generator
        li works best with prime values
        li chosen well, they won't cycle until they nearly exhaust their domain
        li used in 
          span.code.highlight-sec rand() 
          | from standard C library
      h4 Lagged Fibonacci methods
      ul
        li 
          include ../build_pre/equations/lecture06/random_generator_methods_02.svg
        li we are looking further back into the sequence of values
      h4 Carry methods
      ul
        li takes part of the result from the previous stage and carries it forward to the least <br>significant bits in the next stage
        li
          include ../build_pre/equations/lecture06/random_generator_methods_03.svg
    // ============================================================
    +mframeGreen(bgr, 'Random number generators')(class='space-vert-m')
      div.bottom-content.justify-right
        img.mb100.h300(src='../static/slides/images/lecture06/dice.png')
      h4 Mersenne Twister
      ul
        li introduced in 1997
        li colossal period of 
          span.highlight-sec 2^19937-1
        li passes 
          a(href='https://diehard.readthedocs.io/en/latest/') Diehard test 
        li uses SIMD vector instructions
      h4 Mother of all
      ul
        li introduced in 1992
        li multiply-with-carry technique
        li adds the high-entropy bits to the low-entropy bits
        li faster than twister, period of 2^250
      h4 Xoroshiro128+
      ul
        li improved MOA, faster but less random
        li used in many browsers for  
          span.code.highlight-sec Math.random()
    // ============================================================
    +mframe(bgr, 'Random functions distribution')
      div.center-content.fill
        div
          div.columns-5
            div
              img(src='../static/slides/images/lecture06/random_doom.png')
            div
              img(src='../static/slides/images/lecture06/random_openttd.png')
            div
              img(src='../static/slides/images/lecture06/random_lehmer.png')
            div
              img(src='../static/slides/images/lecture06/random_gaussian.png')
            div
              img(src='../static/slides/images/lecture06/random_xorshift.png')
          div.columns-5
            figure
              img(src='../static/slides/images/lecture06/random_doom_sp.png')
              p Doom
            figure
              img(src='../static/slides/images/lecture06/random_openttd_sp.png')
              p Transport Tycoon
            figure
              img(src='../static/slides/images/lecture06/random_lehmer_sp.png')
              p Lehmer RNG
            figure
              img(src='../static/slides/images/lecture06/random_gaussian_sp.png')
              p Gaussian MOA
            figure
              img(src='../static/slides/images/lecture06/random_xorshift_sp.png')
              p Xorshift
    // ============================================================
    +mframeOrange(bgr, 'Random functions distribution')
      h4 Uniform distribution
      ul
        li most common distribution of random generators
        li  
          span.highlight-sec applications: 
          | noise, shuffling, one-of-many selection
      h4 Gaussian (normal) distribution
      ul
        li more common in games - every characteristic has some kind of average, with individuals varying with a normal distribution
        li can be calculated from a uniform generator via transformation (Box-muller algorithm)
        li 
          span.highlight-sec applications: 
          | height of trees, aiming for projectiles, average speed, physical reaction time, reload rate, refresh healing rate, critical hit 
      div.columns-2
        figure.ml80
          img.h300(src='../static/slides/svg/lecture06/distribution_normal.svg')
          p Uniform distribution
        figure.mr80
          img.h300(src='../static/slides/svg/lecture06/distribution_gaussian.svg')
          p Gaussian distribution
    // ============================================================
    +mframeOrange(bgr, 'Terms')
      h4 Seed
      ul
        li a hash that initializes random generators
        li a good source of entropy is user input or current time
      h4 Loot
      ul
        li items obtained over the gameplay 
          span.highlight-sec (money, spells, equipment, weapons,...)  
      h4 Spinning
      ul
        li calling the random function on a time-frame basis without using the result
        li advances the game to a difficult-to-predict place
      h4 Rarity slotting
      ul
        li a method of standardization to determine rates 
          span.highlight-sec (common, rare, epic, legendary)
        li makes game events occur proportionally
        li can be defined as a rarity table, calculated via weighted sum
      h4 Random encounter
      ul
        li popular mechanics of RPG games (Final Fantasy, WoW, Pokémon, Golden Sun)
        li the game suddenly shifts to battle mode, forcing the player to fight
        li after winning the battle, the player receives a reward 
          span.highlight-sec (skill upgrade, items, money)
    // ============================================================
    +mframe(bgr, 'Randomness in games')(class='space-vert-m')
      div.top-content.justify-right
        img.h900(src='../static/slides/images/lecture06/dw_luck_manipulation.gif')
      h4 Final Fantasy 1 (1987)
      ul
        li reading sequentially from a list of pre-generated numbers (256 values in ROM)
        li we could encounter the same group of enemies - 
          span.highlight-sec surprise determination
      h4 Super Mario 64 (1996)
      ul
        li used LCRNG with 65114 possible states
        li no spinning, the algorithm cycles only during certain events  
      h4 Pokémon series for GBA (2002)
      ul
        li in Ruby/Diamond/Emerald, the RNG is spun every frame
        li Emerald sets the seed to zero on power-up
        li knowing which frame generates a shiny Pokémon can cut down on the work <br> needed to get it (otherwise it's 1:8192 prob)
      h4 Darkwing Duck (in the picture)
      ul
        li delaying a frame causes a different drop
    // ============================================================
    +mframe(bgr, 'Randomness in games')
      div.top-content.justify-right.fill
        figure
          img.h400(src='../static/slides/images/lecture06/pitfall.gif')
          p.highlight-sec Pitfall!
      h4 Pitfall! (1982)
      ul
        li used linear-feedback shift register
        li every screen is defined by 1 byte - 256 screens in total
        li e.g. if a certain bit is 1, there is a water in the level
      h4 Doom (1993)
      ul
        li the worst pseudo-random number generator ever
        li a list of 256 random numbers cycled through
      h4 Diablo 1 (1996)
      ul
        li fully procedural levels
        li several stages - determine walkable paths, combine pre-authored chunks, fix faults by minisets
      h4 XCOM: Enemy Unknown (2012)
      ul
        li no random spinning - dangerous when saving the game before taking an important shot
      h4 No Man's Sky (2016)
      ul
        li gussied-up version of Pitfall!
        li very little data is stored on the game's servers as all elements of the game are created through deterministic algorithms and random number generators from a 64-bit seed 
    // ============================================================
    +mframe(bgr, 'Example: Random number table in Doom')
      div.code.doomtable
        include ../static/slides/snippets/lecture06/random_doom.html
    // ============================================================
    +mframeGreen(bgr, 'Noise')
      div.bottom-content.fill
        img.w100(src='../static/slides/images/lecture06/noise.png')
      ul
        li.highlight Randomness is used to vary characteristics, noise is used to vary them over time or in space
        li.mt50 
          span.highlight Noise functions
          ul
            li
              span.highlight-sec Lattice-based
              ul
                li 
                  +strtext3('', 'Perlin Noise,','', 'Simplex Noise,','Wavelet noise, Value noise') 
            li 
              span.highlight-sec Point-based
              ul
                li Worley noise (Voronoi/Cellular) 
    // ============================================================
    +mframeOrange(bgr, 'Perlin Noise')
      ul
        li
          +strtext('', 'Perlin Noise', '- developed by Ken Perlin in 1983')
        li
          +strtext('', 'Simplex Noise', '- Perlin\'s improved noise, fewer artifacts and lower computational overhead') 
        li both are gradient noises - we set a pseudo-random gradient at regularly spaced points in space and interpolate between them
        li the noise is constructed from octaves (contribution to the signal at a particular scale)
        li the signal is interpolated via a quartic function: 
          include ../build_pre/equations/lecture06/perlin_noise.svg
      div.code.mt20
        include ../static/slides/snippets/lecture06/perlin.html
    // ============================================================
    +mframe(bgr, 'Perlin noise example')
      .grid42.center-content.tcenter
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_octave1.jpg')
          p 1 octave
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_octave2.jpg')
          p 2 octaves
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_octave3.jpg')
          p 4 octaves
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_octave4.jpg')
          p 8 octaves
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_persist_2.jpg')
          p persist. 0.2
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_persist_4.jpg')
          p persist. 0.4
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_persist_6.jpg')
          p persist. 0.6
        figure
          img.w350(src!='../static/slides/images/lecture06/perlin_persist_8.jpg')
          p persist. 0.8
    // ============================================================
    +mframe(bgr, 'Fractals')
      ul
        li discovered in 1975
        li rough or fragmented geometric shapes that can be subdivided in parts, each of which is a reduced-size copy of the whole
        li used for creating procedural textures and visual effects
      div.columns-3
        img(src='../static/slides/images/lecture06/fractals_01.gif')
        img(src='../static/slides/images/lecture06/fractals_02.gif')
        img(src='../static/slides/images/lecture06/fractals_03.gif')
    // ============================================================
    +chapter(bgr, 'Data structures')
    // ============================================================
    +mframe(bgr, 'Data structures cheatsheet')
      .top-content.fill
        img.h100(src!='../static/slides/svg/lecture06/data_structures.svg')
    // ============================================================
    +mframeOrange(bgr, 'Spatial Partitioning')
      div.bottom-content.justify-right
        figure.mb50.mr50
          img.h400(src='../static/slides/svg/lecture06/oct_tree.svg')
          p Oct-tree
      h4 Bounding volume
      ul
        li groups objects or their parts together based on their positions and sizes
        li if the object moves, so will the hierarchy
        li used for physics, shape analysis, precise collision detection
      h4 Spatial data structure
      ul
        li a structure that stores objects by their position 
        li is locked to the world
        li used for range queries, neighborhood searching, rough collision detection 
        li.highlight-sec the more objects we have, the more benefits we get
        li.mt80
          span.highlight Implementations
          ul
            li BSP - binary-space partitioning
            li Quad-tree - for 2D and semi-3D space
            li Oct-tree - for 3D space
            li Grid - a square grid
    // ============================================================
    +mframeGreen(bgr, 'Binary space partitioning')
      ul
        li algorithm that decomposes a 
          span.highlight polygon-soup 
          | into a tree that contains convex sets
        li it was first used in Doom to solve difficult rendering of circles around pillars
        li.upside very good for rendering, ray-tracing and collision detection in complex 
          span.highlight indoor 
          | environments
        li.downside works only in static environments and requires a complex preprocessing stage
      div.tcenter
        img.h600.mt30(src='../static/slides/images/lecture06/bsp.jpg')
    // ============================================================
    +mframeOrange(bgr, 'Quad-tree')
      ul
        li hierarchical partition
        li each inner node has 4 children
        li it is common to have the children of same size -> we won't need to save the position vector
        li.highlight overlapping objects are put it into all children they touch
        li only objects in the same leaf can be in collision
        li useful for 
          span.highlight outdoor 
          | scenes, where objects are placed on a landscape
        li good for a small amount of objects of various sizes
      div.tcenter
        img.h500(src='../static/slides/svg/lecture06/quad_tree_intro.svg')
    // ============================================================
    +mframeOrange(bgr, 'Quad-tree for geometric hashing')
      div.top-content.fill
        img.h900(src='../static/slides/svg/lecture06/quad_tree_example.svg')
    // ============================================================
    +mframeOrange(bgr, 'Quad-tree for bounding volumes')
      div.tcenter.mt40
        img.h900(src='../static/slides/svg/lecture06/quad_tree.svg')
    // ============================================================
    +mframeGreen(bgr, 'Oct-tree')
      div.bottom-content
        img.h800(src='../static/slides/svg/lecture06/oct_tree_divided.svg')
      ul
        li doesn't need an expensive preprocessing stage
        li allows very complex level geometry and easy editing
        li used for LoD, collision detection, voxel graphics,...
        li.mt40 0 subdivisions - 1 node
        li 1 subdivision - 9 nodes
        li 2 full subdivisions - 73 nodes
        li 3 full subdivisions - 585 nodes
    // ============================================================
    +mframeOrange(bgr, 'Grid')
      ul
        li implemented as an array or a hash-table
        li each cell has a list of units that are inside
        li if a unit crosses the boundary of the cell, we need to move it to the other list 
        li.highlight-sec good for a large amount of objects of similar size
        li.upside very fast to locate an object - in sharp contrast with recursing down a quad-tree
        li.downside takes up more memory, granularity needs to be determined in advance
        li 
          span.highlight multi-resolution map
          ul
            li hybrid structure, uses multiple grids of different sizes
            li objects are added into one of the grids based on their size 
      div.tcenter
        img.h350(src='../static/slides/svg/lecture06/grid.svg')
    // ============================================================
    +chapter(bgr, 'Steering behaviors')
    // ============================================================
    +mframeOrange(bgr, 'Steering behaviors')
      ul
        li set of algorithms and principles that help autonomous agents move in a realistic manner <br>by using simple forces
        li 
          +strtext('designed by', 'Craig Reynolds ', 'in the early 90\'s')
        li.mt40 
          +strtext('', 'Agent', '- a system situated within an environment, having an ability to', 'sense', 'that environment')
        li.mt40
          span.highlight three layers of motion behavior:
          ul
            li action selection - choosing goals, strategy
            li.highlight steering - trajectory calculation
            li locomotion - way of moving, animation, articulation
      div.tcenter
        img.h350(src='../static/slides/svg/lecture06/steering_desc.svg')
    // ============================================================
    +mframeOrange(bgr, 'Seek')
      ul
        li the simplest steering behavior
        li a force that directs an agent toward a target position
      div.tcenter
        img.h750(src='../static/slides/svg/lecture06/steering_seek.svg')
    // ============================================================
    +mframeOrange(bgr, 'Flee and arrive')
      h4 Flee
      ul
        li opposite of seek
        li creates a force that steers the agent away
      h4 Arrive
      ul
        li seek is not good at stopping
        li arrive decelerates the agent onto the target position
        li additional parameter: 
          span.highlight slowing radius
      div.mt10.tcenter
        img.h500(src='../static/slides/svg/lecture06/steering_seek_2.svg')
    // ============================================================
    +mframeOrange(bgr, 'Pursuit and Evade')
      h4 Pursuit
      ul
        li agent intercepts a moving target 
        li predicts where the target is going to be in the future 
        li calls for a good prediction function
      h4 Evade
      ul
        li opposite of pursuite 
        li the evader flees from the estimated future position
      div.tcenter.mt40
        img.h400(src='../static/slides/svg/lecture06/steering_evasion_pursuit.svg')
    // ============================================================
    +mframeOrange(bgr, 'Wander')
      ul
        li produces a force that will give an impression of a 
          span.highlight random walking 
        li small random displacement is applied to the velocity vector every frame 
        li a circle is projected in front of the vehicle 
        li the vehicle is steered toward a target that moves along the perimeter 
        li smoothness of movement depends on three parameters: 
          ul
            li circle radius, distance from the vehicle and jittering (randomness)
        li the greater the radius and the distance, the stronger the force 
      div.mt20.tcenter
        img.h450(src='../static/slides/svg/lecture06/steering_wander.svg')
    // ============================================================
    +mframeOrange(bgr, 'Path follow')
      ul
        li moves a vehicle along a set of waypoints 
        li 
          +strtext('the last waypoint can be reached using', 'arrive,', 'the others via', 'seek') 
        li
          +strtext('smooth movement can be achieved using a', 'tolerance radius', 'or Bézier curve approximation')
        li very sensitive to configuration (max force, max velocity, radius,...)
      div.tcenter.mt20
        img.h650(src='../static/slides/svg/lecture06/steering_follow.svg')
    // ============================================================
    +mframeOrange(bgr, 'Obstacle avoidance and offset pursuit')
      h4 Obstacle avoidance
      ul
        li steers a vehicle to avoid obstacles (usually approximated by a circle)
        li vehicle has a detection box - rectangular area 
        li 
          +strtext('two forces are calculated:', 'lateral force', 'and', 'braking force')
      div.tcenter
        img.ml200.h300(src='../static/slides/svg/lecture06/steering_avoidance.svg')
      h4 Offset pursuit 
      ul
        li keeps a vehicle positioned at a specified offset from a leader vehicle 
        li useful for battle formations
      div.tcenter
        img.h200(src='../static/slides/svg/lecture06/steering_lead.svg')
    // ============================================================
    +mframeOrange(bgr, 'Flocking')
      ul
        li emergent behavior, more agents/vehicles are taken into consideration
        li combination of three aspects:
          ul
            li
              +strtext('', 'separation', '- steers a vehicle away from its neighborhood')
            li
              +strtext('', 'alignment', '- keeps the vehicle\'s direction aligned with its neighbors')
            li
              +strtext('', 'cohesion', '- moves a vehicle toward the center of mass of its neighbors')
      div.tcenter.mt20
        img.h600(src='../static/slides/svg/lecture06/steering_flock.svg')
    // ============================================================
    +chapter(bgr, 'Dynamics')
    // ============================================================
    +mframeGreen(bgr, 'World size')
      .bottom-content
        table.mb20
          tr
            th Unit Size
            th Unit Example 
            th Upper Range [m]
            th Upper Range area
          tr
            td 100m
            td Space Ship 
            td 1.67 x 10^9
            td Diameter of the Sun 
          tr 
            td 1m
            td Car
            td 1.67 x 10^7
            td Asia 
          tr
            td 1cm
            td Coin
            td 1.67 x 10^6
            td Mexico 
          tr.highlight-sec
            td 1mm
            td Fluid particle
            td 1.67 x 10^5
            td Paris
          tr
            td 100μm
            td Dust
            td 1.67 x 10^4
            td Manhattan 
      ul
        li diameter of the known universe: 
          include ../build_pre/equations/lecture06/world_size_01.svg
        li the smallest theoretical structure: 
          include ../build_pre/equations/lecture06/world_size_02.svg
        li 256b integer gives us 
          include ../build_pre/equations/lecture06/world_size_03.svg
          | values
        li IEEE 754 format stores 24b of resolution in the mantissa: range of 
          include ../build_pre/equations/lecture06/world_size_04.svg
          ul
            li single precision, 32bit: 
              include ../build_pre/equations/lecture06/world_size_05.svg
            li double precision, 64bit: 
              include ../build_pre/equations/lecture06/world_size_06.svg
        li.highlight most games set their basic units as meter, making millimeter the smallest unit 
        li range areas for 32bit numbers:
    // ============================================================
    +mcontainer(bgr)
      h3 Map Size Comparison
      .center-content
        figure.w100
          img.w85(src!='../static/slides/images/lecture06/map_comparison.png')
    // ============================================================
    +mframeGreen(bgr, 'IEEE 754 precision')
      ul
        li a quarter of all 32bit numbers are in the range of 
          include ../build_pre/equations/lecture06/ieee_754_01.svg
          |, half of them in 
          include ../build_pre/equations/lecture06/ieee_754_02.svg
        li from 8 388 608 to 16 777 216, the precision for 32b is 1
      div.tcenter
        img.h750(src='../static/slides/svg/lecture06/float.svg')
    // ============================================================
    +mframeGreen(bgr, 'Points and Vectors')
      ul
        li
          +strtext('', 'Cartesian coordinate system', '- by far the most common')
        li other systems: cylindrical, spherical
        li.highlight in 2D engines, Y-axis is usually inverted
      div.columns-2
        figure
          img.h600(src='../static/slides/svg/lecture06/coord_system_2d.svg')
          p 2D coordinate system
        figure
          img.h600(src='../static/slides/svg/lecture06/coord_system_3d.svg')
          p 3D coordinate system
    // ============================================================
    +mframeOrange(bgr, 'Points and Vectors')
      div.top-content.justify-right
        div.mt100
          div
            figure
              img.h300(src='../static/slides/svg/lecture06/vector_addition.svg')
              p Vector addition and subtraction
          div
            figure
              img.h300(src='../static/slides/svg/lecture06/vector_magnitude.svg')
              p Magnitude of a vector
      ul
        li
          +strtext('', 'Vector', '- a quantity that has both a magnitude and a direction')
        li vector can be used to represent a point, provided that we fix the tail of the vector <br> to the origin of the coordinate system
        li.mt50
          span.highlight addition and subtraction
          ul
            li vector + vector = vector
            li vector - vector = vector
            li point + vector = point
            li point - point = vector
            li point + point = 
              span.highlight undefined
    // ============================================================
    +mframeOrange(bgr, 'Points and Vectors')
      div.bottom-content.justify-right
        img.mb80.h400(src='../static/slides/svg/lecture06/vector_dotproduct.svg')
      ul
        li 
          span.highlight Magnitude
          ul
            li scalar representing the length of the vector
            li
              include ../build_pre/equations/lecture06/vectors_01.svg
        li 
          span.highlight Normalization
          ul
            li a unit vector is a vector with a magnitude of one: 
              include ../build_pre/equations/lecture06/vectors_02.svg
        li
          span.highlight Normal vector
          ul
            li vector is normal to a surface if it is perpendicular to it
        li
          span.highlight Dot product
          ul
            li
              include ../build_pre/equations/lecture06/vectors_03.svg
            li
              include ../build_pre/equations/lecture06/vectors_04.svg
        li
          span.highlight Cross product
          ul
            li yields another vector that is perpendicular to two vectors
            li 
              include ../build_pre/equations/lecture06/vectors_05.svg
    // ============================================================
    +mframe(bgr, 'Example: Direction')
      div.top-content.fill.justify-right
        img.mt80.h750(src='../static/slides/svg/lecture06/example_rotation.svg')
      ul
        li We want to rotate the bottom ship toward the other one.
      div.columns-2
        div
          ol
            li We know 
              include ../build_pre/equations/lecture06/direction_01.svg
            li Calculate 
              include ../build_pre/equations/lecture06/direction_02.svg
              | <br>- it's already normalized
            li Calculate 
              include ../build_pre/equations/lecture06/direction_03.svg
            li Normalize lookAt': 
              include ../build_pre/equations/lecture06/direction_04.svg
            li.highlight 
              include ../build_pre/equations/lecture06/direction_05.svg
        div.tcenter
    // ============================================================
    +mframe(bgr, 'Example: Direction')
      div.top-content.fill.justify-right
        img.mt80.h650(src='../static/slides/svg/lecture06/example_rotation.svg')
      div.columns-2
        div
          ol
            li.highlight-sec let 
              include ../build_pre/equations/lecture06/direction_06.svg
            li 
              include ../build_pre/equations/lecture06/direction_07.svg
            li 
              include ../build_pre/equations/lecture06/direction_08.svg
            li 
              include ../build_pre/equations/lecture06/direction_09.svg
            li.highlight 
              include ../build_pre/equations/lecture06/direction_10.svg
          ul 
            li.highlight-third 
              include ../build_pre/equations/lecture06/direction_11.svg
            li.highlight-third or just simply: 
              include ../build_pre/equations/lecture06/direction_12.svg
        div.tcenter
    // ============================================================
    +mframe(bgr, 'Lines')
      div.bottom-content.fill
        img.h500(src='../static/slides/svg/lecture06/line_point_dist.svg')
      ul
        li we have two points: 
          include ../build_pre/equations/lecture06/lines_01.svg
          | &nbsp;and will take one step in 
          include ../build_pre/equations/lecture06/lines_02.svg
          | &nbsp;direction for the second one: 
          include ../build_pre/equations/lecture06/lines_03.svg
        li subtracting both, we get a vector 
          include ../build_pre/equations/lecture06/lines_04.svg
          | &nbsp;with the same orientation
        li all scalar multiplies of this vector from 
          include ../build_pre/equations/lecture06/lines_05.svg
          | &nbsp;will generate points along the line 
        li.highlight-sec
          include ../build_pre/equations/lecture06/lines_06.svg
        li 
          span.highlight Example: closest point to a line 
          ul
            li given 
              include ../build_pre/equations/lecture06/lines_07.svg
              |, we need to find 
              include ../build_pre/equations/lecture06/lines_08.svg
              |&nbsp;closest to 
              include ../build_pre/equations/lecture06/lines_09.svg
            li we compute the difference vector 
              include ../build_pre/equations/lecture06/lines_10.svg
              |, then we project this onto 
              include ../build_pre/equations/lecture06/lines_11.svg
              |&nbsp;to get 
              include ../build_pre/equations/lecture06/lines_12.svg
            li  
              include ../build_pre/equations/lecture06/lines_13.svg
            li
              include ../build_pre/equations/lecture06/lines_14.svg
    // ============================================================
    +mframeGreen(bgr, 'Terms')
      ul
        li
          +strtext('', 'Kinematics', '- determines motion of objects without reference to forces')
        li
          +strtext('', 'Dynamics', '- determines how objects interact under the influence of forces')
        li
          +strtext('', 'Time', '- a continuous progress of events, measured in seconds')
        li
          +strtext('', 'Mass', '- a scalar quantity measured in kilograms')
        li
          +strtext('', 'Position', '- a point or an area occupied by an object')
        li
          +strtext('', 'Velocity', '- the rate of change of distance over time')
        li
          +strtext('', 'Acceleration', '- the rate of change of velocity over time')
        li
          +strtext('', 'Force', '- an action exerted upon a body in order to change its state')
      div.mt40.tcenter.highlight-sec Most engines use MKS units (meters, kilograms, seconds) and radians for angles
      div.tcenter
        img.h350(src='../static/slides/svg/lecture06/forces.svg')
    // ============================================================
    +mframeGreen(bgr, 'Dynamics')
      div.top-content.justify-right
        div.mt50
          div
            img.w700(src='../static/slides/images/lecture06/angry_birds.gif')
          div
            img.w700(src='../static/slides/svg/lecture06/torque.svg')
      h4 Linear Dynamics
      ul
        li we ignore all rotational effects
        li position can be described by a position vector 
          include ../build_pre/equations/lecture06/dynamics_01.svg
        li
          span.highlight velocity: 
          include ../build_pre/equations/lecture06/dynamics_02.svg
        li
          span.highlight acceleration: 
          include ../build_pre/equations/lecture06/dynamics_03.svg
        li
          span.highlight net force: 
          include ../build_pre/equations/lecture06/dynamics_04.svg
        li
          span.highlight Newton's second law: 
          include ../build_pre/equations/lecture06/dynamics_05.svg
        li
          span.highlight linear momentum: 
          include ../build_pre/equations/lecture06/dynamics_06.svg
      h4.mt40 Angular dynamics
      ul
        li
          span.highlight angular velocity: 
          include ../build_pre/equations/lecture06/dynamics_07.svg
        li
          span.highlight angular acceleration: 
          include ../build_pre/equations/lecture06/dynamics_08.svg
        li
          span.highlight torque: 
          include ../build_pre/equations/lecture06/dynamics_09.svg
          span , torque caused by a force applied to a location
          ul
            li if we apply an off-center force to an object, we expect it to spin
    // ============================================================
    +mframeGreen(bgr, 'Newton\'s laws')
      h4 Lex I
      ul
        li A body will remain at rest or continue to move in a straight line at a constant speed unless acted upon by a force
      h4 Lex II
      ul
        li The acceleration of a body is proportional to the resultant force acting on the body and is in the same direction as the resultant force
      h4 Lex III
      ul
        li When one body exerts a force on a second body, the second body exerts an equal force with opposite direction on the first body
      div.fragment.fade-in
        div.columns-2.ml40
          img.w400(src='../static/slides/images/lecture06/tree.png')
          div.w1200.mt80.ml80
            p.mt40.highlight-sec In most games, Newton's laws don't apply to trees
    // ============================================================
    +mframe(bgr, 'Motion')
      div.columns-2
        div
          h4 Projectile motion
          ul
            li
              include ../build_pre/equations/lecture06/motion_01.svg
            li
              include ../build_pre/equations/lecture06/motion_02.svg
            li
              include ../build_pre/equations/lecture06/motion_03.svg
          h4.mt250 Slope motion (no friction)
          ul
            li
              include ../build_pre/equations/lecture06/motion_04.svg
            li
              include ../build_pre/equations/lecture06/motion_05.svg
            li
              include ../build_pre/equations/lecture06/motion_06.svg
        div
          div
            img.h400(src='../static/slides/svg/lecture06/movement.svg')
          div
            img.h400(src='../static/slides/svg/lecture06/slope.svg')
    // ============================================================
    +mframeGreen(bgr, 'Motion')
      div.bottom-content.fill.justify-left
        img.h600(src='../static/slides/images/lecture06/springs.png')
      div.top-content.justify-right
        img.h900.mr50(src='../static/slides/svg/lecture06/spring.svg')
      h4 Mass-Spring Motion
      ul
        li
          include ../build_pre/equations/lecture06/spring_01.svg
        li Hook's Law: 
          include ../build_pre/equations/lecture06/spring_02.svg
          ul
            li 
              include ../build_pre/equations/lecture06/spring_03.svg
              |&nbsp;is the spring constant 
              include ../build_pre/equations/lecture06/spring_04.svg
        li
          include ../build_pre/equations/lecture06/spring_05.svg
    // ============================================================
    +mframe(bgr, 'Equations of motion')
      div.top-content.justify-right
        img.h400(src='../static/slides/images/lecture06/besiege.gif')
      ul
        li finding 
          include ../build_pre/equations/lecture06/equations_of_motion_01.svg
          |, given knowledge of 
          include ../build_pre/equations/lecture06/equations_of_motion_02.svg
        li
          span.highlight-sec vertical motion under the influence of gravity
          ul
            li
              include ../build_pre/equations/lecture06/equations_of_motion_03.svg
            li
              include ../build_pre/equations/lecture06/equations_of_motion_04.svg
            li
              include ../build_pre/equations/lecture06/equations_of_motion_05.svg
      ul
        li.highlight moving with variable acceleration
        ul
          li drag force: 
            include ../build_pre/equations/lecture06/equations_of_motion_06.svg
          li a simple approximation to air friction (the faster we go, the greater the friction force)
          li how to handle this: derive a function for velocity  
            ul
              li
                include ../build_pre/equations/lecture06/equations_of_motion_07.svg
              li 
                include ../build_pre/equations/lecture06/equations_of_motion_08.svg
          li too difficult - with every change of any force, we would need to modify the simulation code
          li.highlight-sec analytical solutions are almost never possible in game physics
    // ============================================================
    +mframeGreen(bgr, 'Numerical integration')
      div.columns-2
        div
          ul
            li 
              span.highlight Conditions:
              ul
                li we know an initial value of the function: 
                  include ../build_pre/equations/lecture06/numerical_integration_01.svg
                li we know the derivatives  
                  include ../build_pre/equations/lecture06/numerical_integration_02.svg
                li we know the time interval 
                  include ../build_pre/equations/lecture06/numerical_integration_03.svg
            li given 
              include ../build_pre/equations/lecture06/numerical_integration_04.svg
              |, the problem is to find 
              include ../build_pre/equations/lecture06/numerical_integration_05.svg
            li we will start at 
              include ../build_pre/equations/lecture06/numerical_integration_06.svg
              |&nbsp;and take steps in time along the tangent, until we generate an approximation for 
              include ../build_pre/equations/lecture06/numerical_integration_07.svg
            li.mt50.highlight integration methods provide use with the possibility of approximation with different precision and complexity
        div
          img.h700.mt60(src='../static/slides/svg/lecture06/derivation.svg')
    // ============================================================
    +mframeOrange(bgr, 'Integration methods')
      div.bottom-content.justify-right.fill
        img.h600(src='../static/slides/svg/lecture06/integration_methods.svg')
      h4.highlight-sec Implicit methods
      ul
        li make use of quantities from the next time step
        li decrease energy from the system
      h4.highlight-third Semi-implicit methods
      ul
        li combination of explicit and implicit methods 
        li very stable
      h4.highlight Explicit methods
      ul
        li make use of known quantities at each time step
      h4.nohighlight.mt50 Runge-Kutta family
      ul
        li Euler methods, midpoint methods, RK4,...
      h4.nohighlight Verlet family
      ul 
        li Regular Verlet
        li Leapfrog Verlet
        li Velocity Verlet
    // ============================================================
    +mframeOrange(bgr, 'Euler integration')
      div.top-content.justify-left.fill
        img.h400.ml10.mt100(src='../static/slides/svg/lecture06/diff.svg')
      div.columns-2
        div
          ul
            li 
              include ../build_pre/equations/lecture06/euler_01.svg
            h4.mt60 Explicit method
            ul
              li
                include ../build_pre/equations/lecture06/euler_02.svg
            h4 Improved method
            ul
              li
                include ../build_pre/equations/lecture06/euler_03.svg
            h4 Implicit method
            ul
              li
                include ../build_pre/equations/lecture06/euler_04.svg
            li.mt40.upside cheap and easy to implement
            li.downside high error and poor stability, depending directly on the time step
        div
          div
            img.h400(src='../static/slides/svg/lecture06/ballistic_curve.svg')
          div
            img.h400(src='../static/slides/svg/lecture06/ballistic_curve_2.svg')
    // ============================================================
    +mframeGreen(bgr, 'Verlet integration')
      ul
        li used in molecular dynamics, useful in simulating small particles (cloth, rope, soft objects)
        li time invariant - we can run it forwards and then backwards, ending up in the same place
      h4 Regular Verlet
      ul
        li 
          include ../build_pre/equations/lecture06/verlet_01.svg
        li derived by adding two Taylor series expansions
      h4 Verlet leap-frog
      ul
        li 
          include ../build_pre/equations/lecture06/verlet_02.svg
        li 
          include ../build_pre/equations/lecture06/verlet_03.svg
        li method that tracks velocity, but at half a time step off from the position calculation
      h4 Velocity Verlet
      ul
        li 
          include ../build_pre/equations/lecture06/verlet_04.svg
        li 
          include ../build_pre/equations/lecture06/verlet_05.svg
        li most accurate, acceleration needs to be computed twice
        li advantages over Euler when dealing with multiple bodies
    // ============================================================
    +mframe(bgr, 'Dynamics in games')
      div.top-content.fill
        img.w100(src='../static/slides/svg/lecture06/dynamics_in_games.svg')
    // ============================================================
    +mframe(bgr, 'Lecture 6 Review')(class='line-m')
      ul
        li
          +btext('', 'Generative algorithms:', 'random functions, noise functions, fractals')
          ul
            li 
              +btext('', 'Uniform distribution', '- noise, shuffling, one-of-many selections')
            li
              +btext('', 'Gaussian distribution', '- aiming for projectiles, average speed, reload rate')
            li
              +btext('', 'Terms:', 'seed, loot, spinning, rarity slotting, random encounter')
            li
              +btext('', 'Perlin Noise:', 'uses pseudo-random gradient over points in space and interpolates between them')
        li
          +btext('', 'Spatial partitioning structures:', 'BSP, Quad-tree, Oct-tree, Grid')
        li
          +btext('', 'Steering behaviors:', 'seek, flee, arrive, pursuite, evade, wander, path follow, obstacle avoidance, offset pursuit, flocking')
        li
          +btext('', 'Vector operations', '- magnitude, normalization, normal vector, dot product')
        li
          +btext('', 'Integration methods:', 'euler integration, verlet integration')
    // ============================================================
    +gbquote(bgr, 'Kirov Reporting', 'C&C, Red Alert 2', false)(class="w50")

include ./partial/footer.pug
script(src!='../libs/revealjs/revealjs.ts')
script(src!='../src/lectures/reveal-setup.ts')
